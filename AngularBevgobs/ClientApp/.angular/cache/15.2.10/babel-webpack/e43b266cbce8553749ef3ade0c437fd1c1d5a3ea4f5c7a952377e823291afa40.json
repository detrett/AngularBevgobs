{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet CommentBoxComponent = class CommentBoxComponent {\n  constructor(_formbuilder, _router, _route, _commentService, authService) {\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._route = _route;\n    this._commentService = _commentService;\n    this.authService = authService;\n    this.currentUser = null;\n    this.commentContent = '';\n    this.previewContent = 'Nothing to preview.';\n    this.commentForm = _formbuilder.group({\n      Title: [''],\n      Body: ['', Validators.required],\n      ThreadId: [''],\n      UserId: [''],\n      CreatedAt: [new Date()]\n    });\n  }\n  ngOnChanges(changes) {\n    console.log(\"New Thread Form Component: ngOnChanges()\");\n    if (changes.threadId && changes.threadId.currentValue !== undefined) {\n      this.commentForm.patchValue({\n        ThreadId: this.threadId\n      });\n    }\n  }\n  commentPreview() {\n    console.log(\"Comment Box Component: commentPreview()\");\n    console.log(\"Data: \" + this.commentContent);\n    if (this.commentContent.trim().length === 0) {\n      this.previewContent = 'Nothing to preview.';\n    } else {\n      this.previewContent = this.commentContent;\n    }\n  }\n  ngOnInit() {\n    console.log(\"Comment Box Component: ngOnInit()\");\n    const userId = localStorage.getItem('userId');\n    if (userId) {\n      this.authService.getUserDetails(+userId).subscribe({\n        next: user => {\n          this.currentUser = user;\n          console.log('Current user:', this.currentUser);\n          this.commentForm.patchValue({\n            UserId: userId\n          });\n        },\n        error: err => {\n          console.error('Error fetching user details:', err);\n        }\n      });\n    } else {\n      console.error('User ID not found in local storage');\n    }\n  }\n  getFormattedDate() {\n    console.log(\"Comment Box Component: getFormattedDate()\");\n    const now = new Date();\n    return `on ${now.toLocaleDateString('en-UK', {\n      day: 'numeric',\n      month: 'long'\n    })}`;\n  }\n  get authorJoinDate() {\n    if (!this.currentUser?.CreatedAt) {\n      return \"Undefined date\";\n    } else {\n      const date = new Date(this.currentUser?.CreatedAt);\n      return date.toLocaleDateString('en-UK', {\n        day: 'numeric',\n        month: 'short',\n        year: 'numeric'\n      });\n    }\n  }\n  get isAuthenticated() {\n    return this.authService.isAuthenticated();\n  }\n  logout() {\n    this.authService.logout();\n  }\n  onSubmit() {\n    console.log(\"New Comment form submitted:\");\n    console.log(this.commentForm);\n    const newComment = this.commentForm.value;\n    this._commentService.createComment(newComment).subscribe(response => {\n      if (response.success) {\n        console.log(response.message);\n        this.commentForm.reset();\n        window.location.reload();\n      } else {\n        console.log('Comment creation failed');\n      }\n    });\n  }\n};\n__decorate([Input()], CommentBoxComponent.prototype, \"threadId\", void 0);\nCommentBoxComponent = __decorate([Component({\n  selector: 'app-comment-box',\n  templateUrl: './comment-box.component.html',\n  styleUrls: ['./comment-box.component.css']\n})], CommentBoxComponent);\nexport { CommentBoxComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAmDC,KAAK,QAAQ,eAAe;AAEjG,SAAiCC,UAAU,QAA0C,gBAAgB;AAU9F,IAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAO9BC,YACUC,YAAyB,EACzBC,OAAe,EACfC,MAAsB,EACtBC,eAA+B,EAC/BC,WAAwB;IAJxB,iBAAY,GAAZJ,YAAY;IACZ,YAAO,GAAPC,OAAO;IACP,WAAM,GAANC,MAAM;IACN,oBAAe,GAAfC,eAAe;IACf,gBAAW,GAAXC,WAAW;IAXrB,gBAAW,GAAQ,IAAI;IACvB,mBAAc,GAAW,EAAE;IAC3B,mBAAc,GAAW,qBAAqB;IAU5C,IAAI,CAACC,WAAW,GAAGL,YAAY,CAACM,KAAK,CAAC;MACpCC,KAAK,EAAE,CAAC,EAAE,CAAC;MACXC,IAAI,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACY,QAAQ,CAAC;MAC/BC,QAAQ,EAAE,CAAC,EAAE,CAAC;MACdC,MAAM,EAAE,CAAC,EAAE,CAAC;MACZC,SAAS,EAAE,CAAC,IAAIC,IAAI,EAAE;KACvB,CAAC;EACJ;EAEAC,WAAW,CAACC,OAAsB;IAChCC,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IACvD,IAAIF,OAAO,CAACG,QAAQ,IAAIH,OAAO,CAACG,QAAQ,CAACC,YAAY,KAAKC,SAAS,EAAE;MACnE,IAAI,CAACf,WAAW,CAACgB,UAAU,CAAC;QAAEX,QAAQ,EAAE,IAAI,CAACQ;MAAQ,CAAE,CAAC;;EAE5D;EAEAI,cAAc;IACZN,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACtDD,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAACM,cAAc,CAAC;IAE3C,IAAI,IAAI,CAACA,cAAc,CAACC,IAAI,EAAE,CAACC,MAAM,KAAK,CAAC,EAAE;MAC3C,IAAI,CAACC,cAAc,GAAG,qBAAqB;KAC5C,MAAM;MACL,IAAI,CAACA,cAAc,GAAG,IAAI,CAACH,cAAc;;EAE7C;EAEAI,QAAQ;IACNX,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAEhD,MAAMW,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAC7C,IAAIF,MAAM,EAAE;MACV,IAAI,CAACxB,WAAW,CAAC2B,cAAc,CAAC,CAACH,MAAM,CAAC,CAACI,SAAS,CAAC;QACjDC,IAAI,EAAGC,IAAI,IAAI;UACb,IAAI,CAACC,WAAW,GAAGD,IAAI;UACvBlB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,IAAI,CAACkB,WAAW,CAAC;UAC9C,IAAI,CAAC9B,WAAW,CAACgB,UAAU,CAAC;YAAEV,MAAM,EAAEiB;UAAM,CAAE,CAAC;QACjD,CAAC;QACDQ,KAAK,EAAGC,GAAG,IAAI;UACbrB,OAAO,CAACoB,KAAK,CAAC,8BAA8B,EAAEC,GAAG,CAAC;QACpD;OACD,CAAC;KACH,MAAM;MACLrB,OAAO,CAACoB,KAAK,CAAC,oCAAoC,CAAC;;EAEvD;EAEAE,gBAAgB;IAEdtB,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;IACxD,MAAMsB,GAAG,GAAG,IAAI1B,IAAI,EAAE;IACtB,OAAO,MAAM0B,GAAG,CAACC,kBAAkB,CAAC,OAAO,EAAE;MAAEC,GAAG,EAAE,SAAS;MAAEC,KAAK,EAAE;IAAM,CAAE,CAAC,EAAE;EAEnF;EAEA,IAAIC,cAAc;IAChB,IAAI,CAAC,IAAI,CAACR,WAAW,EAAEvB,SAAS,EAAE;MAChC,OAAO,gBAAgB;KACxB,MAAM;MACL,MAAMgC,IAAI,GAAG,IAAI/B,IAAI,CAAC,IAAI,CAACsB,WAAW,EAAEvB,SAAS,CAAC;MAClD,OAAOgC,IAAI,CAACJ,kBAAkB,CAAC,OAAO,EAAE;QAAEC,GAAG,EAAE,SAAS;QAAEC,KAAK,EAAE,OAAO;QAAEG,IAAI,EAAE;MAAS,CAAE,CAAC;;EAEhG;EAEA,IAAIC,eAAe;IACjB,OAAO,IAAI,CAAC1C,WAAW,CAAC0C,eAAe,EAAE;EAC3C;EAEAC,MAAM;IACJ,IAAI,CAAC3C,WAAW,CAAC2C,MAAM,EAAE;EAC3B;EAEAC,QAAQ;IACNhC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1CD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACZ,WAAW,CAAC;IAC7B,MAAM4C,UAAU,GAAG,IAAI,CAAC5C,WAAW,CAAC6C,KAAK;IAEzC,IAAI,CAAC/C,eAAe,CAACgD,aAAa,CAACF,UAAU,CAAC,CAC3CjB,SAAS,CAACoB,QAAQ,IAAG;MACpB,IAAIA,QAAQ,CAACC,OAAO,EAAE;QACpBrC,OAAO,CAACC,GAAG,CAACmC,QAAQ,CAACE,OAAO,CAAC;QAC7B,IAAI,CAACjD,WAAW,CAACkD,KAAK,EAAE;QACxBC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;OACzB,MACI;QACH1C,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;;IAE1C,CAAC,CAAC;EAGN;CACD;AAnGU0C,YAAR/D,KAAK,EAAE,qDAAmB;AALhBE,mBAAmB,eAL/BH,SAAS,CAAC;EACTiE,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,GACWhE,mBAAmB,CAwG/B;SAxGYA,mBAAmB","names":["Component","Input","Validators","CommentBoxComponent","constructor","_formbuilder","_router","_route","_commentService","authService","commentForm","group","Title","Body","required","ThreadId","UserId","CreatedAt","Date","ngOnChanges","changes","console","log","threadId","currentValue","undefined","patchValue","commentPreview","commentContent","trim","length","previewContent","ngOnInit","userId","localStorage","getItem","getUserDetails","subscribe","next","user","currentUser","error","err","getFormattedDate","now","toLocaleDateString","day","month","authorJoinDate","date","year","isAuthenticated","logout","onSubmit","newComment","value","createComment","response","success","message","reset","window","location","reload","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/brageeilertsen/RiderProjects/AngularBevgobs1/AngularBevgobs/ClientApp/src/app/comment-box/comment-box.component.ts"],"sourcesContent":["import { Component, OnInit, OnChanges, AfterViewInit, SimpleChanges, Input } from '@angular/core';\nimport { AuthService } from 'src/app/services/authentication.service';\nimport { FormGroup, FormControl, Validators, FormBuilder, ReactiveFormsModule } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CommentService } from '../comment/comment.service';\ndeclare var bootstrap: any;\n\n@Component({\n  selector: 'app-comment-box',\n  templateUrl: './comment-box.component.html',\n  styleUrls: ['./comment-box.component.css']\n})\nexport class CommentBoxComponent implements OnInit, OnChanges {\n  currentUser: any = null;\n  commentContent: string = '';\n  previewContent: string = 'Nothing to preview.';\n  commentForm: FormGroup;\n  @Input() threadId?: number;\n\n  constructor(\n    private _formbuilder: FormBuilder,\n    private _router: Router,\n    private _route: ActivatedRoute,\n    private _commentService: CommentService,\n    private authService: AuthService) {\n    this.commentForm = _formbuilder.group({\n      Title: [''],\n      Body: ['', Validators.required],\n      ThreadId: [''],\n      UserId: [''],\n      CreatedAt: [new Date()],\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    console.log(\"New Thread Form Component: ngOnChanges()\");\n    if (changes.threadId && changes.threadId.currentValue !== undefined) {\n      this.commentForm.patchValue({ ThreadId: this.threadId });\n    }\n  }\n\n  commentPreview() {\n    console.log(\"Comment Box Component: commentPreview()\");\n    console.log(\"Data: \" + this.commentContent);\n\n    if (this.commentContent.trim().length === 0) {\n      this.previewContent = 'Nothing to preview.';\n    } else {\n      this.previewContent = this.commentContent;\n    }\n  }\n\n  ngOnInit(): void {\n    console.log(\"Comment Box Component: ngOnInit()\");\n\n    const userId = localStorage.getItem('userId');\n    if (userId) {\n      this.authService.getUserDetails(+userId).subscribe({\n        next: (user) => {\n          this.currentUser = user;\n          console.log('Current user:', this.currentUser);\n          this.commentForm.patchValue({ UserId: userId });\n        },\n        error: (err) => {\n          console.error('Error fetching user details:', err);\n        }\n      });\n    } else {\n      console.error('User ID not found in local storage');\n    }\n  }\n\n  getFormattedDate(): string {\n\n    console.log(\"Comment Box Component: getFormattedDate()\");\n    const now = new Date();\n    return `on ${now.toLocaleDateString('en-UK', { day: 'numeric', month: 'long' })}`;\n\n  }\n\n  get authorJoinDate() {\n    if (!this.currentUser?.CreatedAt) {\n      return \"Undefined date\"\n    } else {\n      const date = new Date(this.currentUser?.CreatedAt);\n      return date.toLocaleDateString('en-UK', { day: 'numeric', month: 'short', year: 'numeric' });\n    }\n  }\n\n  get isAuthenticated(): boolean {\n    return this.authService.isAuthenticated();\n  }\n\n  logout() {\n    this.authService.logout();\n  }\n\n  onSubmit() {\n    console.log(\"New Comment form submitted:\");\n    console.log(this.commentForm);\n    const newComment = this.commentForm.value;\n\n    this._commentService.createComment(newComment)\n      .subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this.commentForm.reset();\n          window.location.reload();\n        }\n        else {\n          console.log('Comment creation failed');\n        }\n      });\n\n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}