{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet UserSettingsComponent = class UserSettingsComponent {\n  constructor(authService, formBuilder) {\n    this.authService = authService;\n    this.formBuilder = formBuilder;\n    this.currentUser = {\n      email: '',\n      username: '',\n      id: null\n    };\n    this.loading = false;\n    this.errorMessage = '';\n    this.successMessage = '';\n    this.imagePreviewUrl = null;\n  }\n  ngOnInit() {\n    this.initializeForm();\n    this.loadCurrentUser();\n  }\n  loadCurrentUser() {\n    const userId = localStorage.getItem('userId');\n    if (userId) {\n      this.authService.getUserDetails(+userId).subscribe({\n        next: user => {\n          this.currentUser = user;\n          this.updateFormValues(user);\n        },\n        error: err => {\n          console.error('Error fetching user details:', err);\n        }\n      });\n    } else {\n      console.error('User ID not found in local storage');\n    }\n  }\n  initializeForm() {\n    this.settingsForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      username: ['', Validators.required],\n      password: ['', [Validators.minLength(8)]]\n    });\n  }\n  updateFormValues(user) {\n    this.settingsForm.patchValue({\n      email: user.email,\n      username: user.username\n      // Update other form controls here if needed\n    });\n  }\n\n  onUpdateSettings() {\n    if (this.settingsForm.valid) {\n      this.loading = true;\n      const formData = new FormData();\n      formData.append('id', this.currentUser.id.toString());\n      // Append email and username only if they have values\n      if (this.settingsForm.value.email) {\n        formData.append('email', this.settingsForm.value.email);\n      }\n      if (this.settingsForm.value.username) {\n        formData.append('username', this.settingsForm.value.username);\n      }\n      // Append password only if it's not empty\n      if (this.settingsForm.value.password) {\n        formData.append('password', this.settingsForm.value.password);\n      }\n      // Append the profile picture only if it's selected\n      if (this.selectedFile) {\n        formData.append('profilePicture', this.selectedFile, this.selectedFile.name);\n      }\n      this.authService.updateUserDetails(this.currentUser.id, formData).subscribe({\n        next: response => {\n          this.successMessage = 'Update successful!';\n          this.fetchUpdatedUserDetails();\n        },\n        error: err => {\n          this.errorMessage = 'Error updating user settings: ' + err.message;\n          console.error('Error updating user settings:', err);\n          this.loading = false;\n        },\n        complete: () => {\n          this.loading = false;\n        }\n      });\n    }\n  }\n  fetchUpdatedUserDetails() {\n    const userId = localStorage.getItem('userId');\n    if (userId) {\n      this.authService.getUserDetails(+userId).subscribe({\n        next: user => {\n          this.currentUser = user;\n          if (this.currentUser.UserPhoto) {\n            const blob = new Blob([new Uint8Array(this.currentUser.UserPhoto)], {\n              type: 'image/png'\n            });\n            const reader = new FileReader();\n            reader.readAsDataURL(blob);\n            reader.onloadend = () => {\n              this.currentUser.UserPhotoBase64 = reader.result;\n            };\n          }\n          this.updateFormValues(user);\n          this.loading = false;\n        },\n        error: err => {\n          console.error('Error fetching updated user details:', err);\n          this.loading = false;\n        }\n      });\n    }\n  }\n  onProfilePictureChange(event) {\n    const element = event.currentTarget;\n    let fileList = element.files;\n    if (fileList && fileList.length > 0) {\n      this.selectedFile = fileList[0];\n      // Create a URL for the selected file\n      const fileReader = new FileReader();\n      fileReader.onload = () => {\n        if (fileReader.result) {\n          this.imagePreviewUrl = fileReader.result;\n        }\n      };\n      fileReader.readAsDataURL(this.selectedFile);\n    }\n  }\n  get isAuthenticated() {\n    return this.authService.isAuthenticated();\n  }\n  logout() {\n    this.authService.logout();\n  }\n};\nUserSettingsComponent = __decorate([Component({\n  selector: 'app-user-settings',\n  templateUrl: './user-settings.component.html',\n  styleUrls: ['./user-settings.component.css']\n})], UserSettingsComponent);\nexport { UserSettingsComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","UserSettingsComponent","constructor","authService","formBuilder","email","username","id","ngOnInit","initializeForm","loadCurrentUser","userId","localStorage","getItem","getUserDetails","subscribe","next","user","currentUser","updateFormValues","error","err","console","settingsForm","group","required","password","minLength","patchValue","onUpdateSettings","valid","loading","formData","FormData","append","toString","value","selectedFile","name","updateUserDetails","response","successMessage","fetchUpdatedUserDetails","errorMessage","message","complete","UserPhoto","blob","Blob","Uint8Array","type","reader","FileReader","readAsDataURL","onloadend","UserPhotoBase64","result","onProfilePictureChange","event","element","currentTarget","fileList","files","length","fileReader","onload","imagePreviewUrl","isAuthenticated","logout","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/brageeilertsen/RiderProjects/AngularBevgobs1/AngularBevgobs/ClientApp/src/app/user-settings/user-settings.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/services/authentication.service';\n\n@Component({\n  selector: 'app-user-settings',\n  templateUrl: './user-settings.component.html',\n  styleUrls: ['./user-settings.component.css']\n})\n\nexport class UserSettingsComponent implements OnInit {\n  currentUser: any = {\n    email: '',\n    username: '',\n    id: null,\n  };\n  settingsForm!: FormGroup;\n  loading = false;\n  errorMessage: string = '';\n  successMessage: string = '';\n  selectedFile: File | undefined;\n  imagePreviewUrl: string | null = null;\n\n  constructor(\n    private authService: AuthService,\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.initializeForm();\n    this.loadCurrentUser();\n  }\n\n  private loadCurrentUser() {\n    const userId = localStorage.getItem('userId');\n    if (userId) {\n      this.authService.getUserDetails(+userId).subscribe({\n        next: (user) => {\n          this.currentUser = user;\n          this.updateFormValues(user);\n        },\n        error: (err) => {\n          console.error('Error fetching user details:', err);\n        }\n      });\n    } else {\n      console.error('User ID not found in local storage');\n    }\n  }\n\n  private initializeForm() {\n    this.settingsForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      username: ['', Validators.required],\n      password: ['', [Validators.minLength(8)]]\n    });\n  }\n\n  private updateFormValues(user: any) {\n    this.settingsForm.patchValue({\n      email: user.email,\n      username: user.username\n      // Update other form controls here if needed\n    });\n  }\n\n  onUpdateSettings() {\n    if (this.settingsForm.valid) {\n      this.loading = true;\n\n      const formData = new FormData();\n      formData.append('id', this.currentUser.id.toString());\n\n      // Append email and username only if they have values\n      if (this.settingsForm.value.email) {\n        formData.append('email', this.settingsForm.value.email);\n      }\n      if (this.settingsForm.value.username) {\n        formData.append('username', this.settingsForm.value.username);\n      }\n\n      // Append password only if it's not empty\n      if (this.settingsForm.value.password) {\n        formData.append('password', this.settingsForm.value.password);\n      }\n\n      // Append the profile picture only if it's selected\n      if (this.selectedFile) {\n        formData.append('profilePicture', this.selectedFile, this.selectedFile.name);\n      }\n\n      this.authService.updateUserDetails(this.currentUser.id, formData).subscribe({\n        next: (response) => {\n          this.successMessage = 'Update successful!';\n          this.fetchUpdatedUserDetails();\n        },\n        error: (err) => {\n          this.errorMessage = 'Error updating user settings: ' + err.message;\n          console.error('Error updating user settings:', err);\n          this.loading = false;\n        },\n        complete: () => {\n          this.loading = false;\n        }\n      });\n    }\n  }\n\n  private fetchUpdatedUserDetails() {\n    const userId = localStorage.getItem('userId');\n    if (userId) {\n      this.authService.getUserDetails(+userId).subscribe({\n        next: (user) => {\n          this.currentUser = user;\n          if (this.currentUser.UserPhoto) {\n            const blob = new Blob([new Uint8Array(this.currentUser.UserPhoto)], { type: 'image/png' });\n            const reader = new FileReader();\n            reader.readAsDataURL(blob);\n            reader.onloadend = () => {\n              this.currentUser.UserPhotoBase64 = reader.result as string;\n            };\n          }\n          this.updateFormValues(user);\n          this.loading = false;\n        },\n        error: (err) => {\n          console.error('Error fetching updated user details:', err);\n          this.loading = false;\n        }\n      });\n    }\n  }\n\n\n\n  onProfilePictureChange(event: Event): void {\n    const element = event.currentTarget as HTMLInputElement;\n    let fileList: FileList | null = element.files;\n    if (fileList && fileList.length > 0) {\n      this.selectedFile = fileList[0];\n\n      // Create a URL for the selected file\n      const fileReader = new FileReader();\n      fileReader.onload = () => {\n        if (fileReader.result) {\n          this.imagePreviewUrl = fileReader.result as string;\n        }\n      };\n      fileReader.readAsDataURL(this.selectedFile);\n    }\n  }\n\n  get isAuthenticated(): boolean {\n    return this.authService.isAuthenticated();\n  }\n\n  logout() {\n    this.authService.logout();\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}