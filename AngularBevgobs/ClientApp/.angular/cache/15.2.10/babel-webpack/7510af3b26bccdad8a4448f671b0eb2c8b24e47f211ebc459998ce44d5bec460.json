{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:5186/api/authenticate';\n    this.isAuthenticated = false;\n  }\n  login(username, password) {\n    return this.apiService.login(username, password).pipe(tap(response => {\n      this._isAu$.next(true);\n      localStorage.setItem('profanis_auth', response.token);\n    }));\n  }\n  logout() {\n    this.isAuthenticated = false;\n  }\n  register(registerData) {\n    return this.http.post(`${this.baseUrl}/register`, registerData);\n  }\n  checkUsernameAvailability(username) {\n    return this.http.get('/api/user/check-username', {\n      params: {\n        username\n      }\n    });\n  }\n  checkAuthentication() {\n    return this.http.get(`${this.baseUrl}/check-authentication`);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,QAAQ,gBAAgB;;;AAYpC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,YAAO,GAAG,wCAAwC;IAE1D,oBAAe,GAAY,KAAK;EACQ;EAExCC,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACC,UAAU,CAACH,KAAK,CAACC,QAAQ,EAAEC,QAAQ,CAAC,CAACE,IAAI,CACnDR,GAAG,CAAES,QAAa,IAAI;MACpB,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;MACtBC,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEJ,QAAQ,CAACK,KAAK,CAAC;IACvD,CAAC,CAAC,CACH;EACH;EAGAC,MAAM;IACJ,IAAI,CAACC,eAAe,GAAG,KAAK;EAC9B;EAEAC,QAAQ,CAACC,YAAiB;IACxB,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,WAAW,EAAEF,YAAY,CAAC;EACjE;EACAG,yBAAyB,CAAChB,QAAgB;IACxC,OAAO,IAAI,CAACF,IAAI,CAACmB,GAAG,CAAU,0BAA0B,EAAE;MAAEC,MAAM,EAAE;QAAElB;MAAQ;IAAE,CAAE,CAAC;EACrF;EACAmB,mBAAmB;IACjB,OAAO,IAAI,CAACrB,IAAI,CAACmB,GAAG,CAAC,GAAG,IAAI,CAACF,OAAO,uBAAuB,CAAC;EAC9D;EAAC;qBA5BUnB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAwB,SAAXxB,WAAW;IAAAyB,YAFV;EAAM","names":["tap","AuthService","constructor","http","login","username","password","apiService","pipe","response","_isAu$","next","localStorage","setItem","token","logout","isAuthenticated","register","registerData","post","baseUrl","checkUsernameAvailability","get","params","checkAuthentication","factory","providedIn"],"sourceRoot":"","sources":["/Users/brageeilertsen/RiderProjects/AngularBevgobs1/AngularBevgobs/ClientApp/src/app/services/authentication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport {Observable} from \"rxjs\";\n\n\n\ninterface AuthResponse {\n  token: string;\n  expiration: Date;\n}\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private baseUrl = 'http://localhost:5186/api/authenticate';\n\n  isAuthenticated: boolean = false;\n  constructor(private http: HttpClient) { }\n\n  login(username: string, password: string) {\n    return this.apiService.login(username, password).pipe(\n      tap((response: any) => {\n        this._isAu$.next(true);\n        localStorage.setItem('profanis_auth', response.token);\n      })\n    );\n  }\n\n\n  logout() {\n    this.isAuthenticated = false;\n  }\n\n  register(registerData: any): Observable<any> {\n    return this.http.post(`${this.baseUrl}/register`, registerData);\n  }\n  checkUsernameAvailability(username: string): Observable<boolean> {\n    return this.http.get<boolean>('/api/user/check-username', { params: { username } });\n  }\n  checkAuthentication(): Observable<any> {\n    return this.http.get(`${this.baseUrl}/check-authentication`);\n  }\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}