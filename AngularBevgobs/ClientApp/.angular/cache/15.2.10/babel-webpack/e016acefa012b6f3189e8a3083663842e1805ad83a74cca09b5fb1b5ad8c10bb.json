{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { of } from 'rxjs';\nimport { map, catchError, debounceTime } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/authentication.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nfunction RegisterComponent_div_6_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \"Username is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_6_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \"Username is already taken.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, RegisterComponent_div_6_small_1_Template, 2, 0, \"small\", 9);\n    i0.ɵɵtemplate(2, RegisterComponent_div_6_small_2_Template, 2, 0, \"small\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r0.registerForm.get(\"username\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r0.registerForm.get(\"username\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors.alreadyTaken);\n  }\n}\nfunction RegisterComponent_div_8_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \"Email is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_8_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \"Invalid email format.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, RegisterComponent_div_8_small_1_Template, 2, 0, \"small\", 9);\n    i0.ɵɵtemplate(2, RegisterComponent_div_8_small_2_Template, 2, 0, \"small\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r1.registerForm.get(\"email\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r1.registerForm.get(\"email\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors.email);\n  }\n}\nfunction RegisterComponent_div_10_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \"Password is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_10_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \"Password must be at least 8 characters long.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, RegisterComponent_div_10_small_1_Template, 2, 0, \"small\", 9);\n    i0.ɵɵtemplate(2, RegisterComponent_div_10_small_2_Template, 2, 0, \"small\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r2.registerForm.get(\"password\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r2.registerForm.get(\"password\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors.minlength);\n  }\n}\nfunction RegisterComponent_div_12_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \"Confirm password is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_12_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \"Passwords do not match.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, RegisterComponent_div_12_small_1_Template, 2, 0, \"small\", 9);\n    i0.ɵɵtemplate(2, RegisterComponent_div_12_small_2_Template, 2, 0, \"small\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r3.registerForm.get(\"confirmPassword\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.registerForm.errors == null ? null : ctx_r3.registerForm.errors.notMatching);\n  }\n}\nexport class RegisterComponent {\n  constructor(authService, router, formBuilder) {\n    this.authService = authService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n  }\n  ngOnInit() {\n    this.registerForm = this.formBuilder.group({\n      username: ['', [Validators.required], [this.usernameValidator()]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      confirmPassword: ['', [Validators.required]]\n    }, {\n      validator: this.matchPassword\n    });\n  }\n  matchPassword(group) {\n    const passwordControl = group.get('password');\n    const confirmPasswordControl = group.get('confirmPassword');\n    if (!passwordControl || !confirmPasswordControl) {\n      return {\n        invalidForm: true\n      };\n    }\n    const password = passwordControl.value;\n    const confirmPassword = confirmPasswordControl.value;\n    return password === confirmPassword ? null : {\n      notMatching: true\n    };\n  }\n  usernameValidator() {\n    return control => {\n      if (!control.value) {\n        return of(null);\n      }\n      // Replace this with your actual username availability check logic\n      return this.authService.checkUsernameAvailability(control.value).pipe(debounceTime(500), map(isAvailable => isAvailable ? null : {\n        alreadyTaken: true\n      }), catchError(() => of(null)));\n    };\n  }\n  onRegister() {\n    if (this.registerForm.valid) {\n      this.authService.register(this.registerForm.value).subscribe(data => {\n        console.log('Registration successful', data);\n        localStorage.setItem('token', data.token);\n        this.router.navigate(['/']);\n      }, error => {\n        console.error('Registration failed', error);\n      });\n    }\n  }\n  static #_ = this.ɵfac = function RegisterComponent_Factory(t) {\n    return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterComponent,\n    selectors: [[\"app-register\"]],\n    decls: 16,\n    vars: 6,\n    consts: [[2, \"display\", \"flex\", \"justify-content\", \"center\", \"align-items\", \"center\", \"min-height\", \"100vh\", \"padding\", \"20px\"], [1, \"register-card\", 2, \"max-width\", \"2000px\", \"margin\", \"auto\", \"width\", \"100%\"], [1, \"row\", \"d-flex\", \"justify-content-center\", \"col-12\", \"mb-5\"], [1, \"col-5\", \"border-pink\", \"rounded\", \"m-20\", \"background-light\", \"card\", \"pb-2\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-floating\", \"mb-2\"], [4, \"ngIf\"], [1, \"d-flex\"], [\"type\", \"submit\", 1, \"mb-5\", \"login-pink-btn\", \"m-auto\", 3, \"disabled\"], [\"class\", \"error\", 4, \"ngIf\"], [1, \"error\"]],\n    template: function RegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"section\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"form\", 4);\n        i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_4_listener() {\n          return ctx.onRegister();\n        });\n        i0.ɵɵelementStart(5, \"div\", 5);\n        i0.ɵɵtemplate(6, RegisterComponent_div_6_Template, 3, 2, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 5);\n        i0.ɵɵtemplate(8, RegisterComponent_div_8_Template, 3, 2, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 5);\n        i0.ɵɵtemplate(10, RegisterComponent_div_10_Template, 3, 2, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 5);\n        i0.ɵɵtemplate(12, RegisterComponent_div_12_Template, 3, 2, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 7)(14, \"button\", 8);\n        i0.ɵɵtext(15, \"Register\");\n        i0.ɵɵelementEnd()()()()()()();\n      }\n      if (rf & 2) {\n        let tmp_1_0;\n        let tmp_2_0;\n        let tmp_3_0;\n        let tmp_4_0;\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx.registerForm.get(\"username\")) == null ? null : tmp_1_0.touched);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_2_0.touched);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", (tmp_3_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_3_0.touched);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", (tmp_4_0 = ctx.registerForm.get(\"confirmPassword\")) == null ? null : tmp_4_0.touched);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !ctx.registerForm.valid);\n      }\n    },\n    dependencies: [i4.NgIf, i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["Validators","of","map","catchError","debounceTime","i0","RegisterComponent","constructor","authService","router","formBuilder","ngOnInit","registerForm","group","username","required","usernameValidator","email","password","minLength","confirmPassword","validator","matchPassword","passwordControl","get","confirmPasswordControl","invalidForm","value","notMatching","control","checkUsernameAvailability","pipe","isAvailable","alreadyTaken","onRegister","valid","register","subscribe","data","console","log","localStorage","setItem","token","navigate","error","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/brageeilertsen/RiderProjects/AngularBevgobs1/AngularBevgobs/ClientApp/src/app/register/register.component.ts","/Users/brageeilertsen/RiderProjects/AngularBevgobs1/AngularBevgobs/ClientApp/src/app/register/register.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {FormBuilder, FormGroup, Validators, AsyncValidatorFn, AbstractControl, ValidationErrors} from '@angular/forms';\nimport { AuthService } from 'src/app/services/authentication.service';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError, debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  registerForm!: FormGroup;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.registerForm = this.formBuilder.group({\n      username: ['', [Validators.required], [this.usernameValidator()]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      confirmPassword: ['', [Validators.required]]\n    }, { validator: this.matchPassword });\n  }\n\n  matchPassword(group: FormGroup): ValidationErrors | null {\n    const passwordControl = group.get('password');\n    const confirmPasswordControl = group.get('confirmPassword');\n\n    if (!passwordControl || !confirmPasswordControl) {\n      return { invalidForm: true };\n    }\n\n    const password = passwordControl.value;\n    const confirmPassword = confirmPasswordControl.value;\n\n    return password === confirmPassword ? null : { notMatching: true };\n  }\n\n  usernameValidator(): AsyncValidatorFn {\n    return (control: AbstractControl): Observable<ValidationErrors | null> => {\n      if (!control.value) {\n        return of(null);\n      }\n      // Replace this with your actual username availability check logic\n      return this.authService.checkUsernameAvailability(control.value).pipe(\n        debounceTime(500),\n        map(isAvailable => (isAvailable ? null : { alreadyTaken: true })),\n        catchError(() => of(null))\n      );\n    };\n  }\n\n  onRegister() {\n    if (this.registerForm.valid) {\n      this.authService.register(this.registerForm.value).subscribe(\n        data => {\n          console.log('Registration successful', data);\n          localStorage.setItem('token', data.token);\n          this.router.navigate(['/']);\n        },\n        error => {\n          console.error('Registration failed', error);\n        }\n      );\n    }\n  }\n}\n","<div style=\"display: flex; justify-content: center; align-items: center; min-height: 100vh; padding: 20px;\">\n  <section class=\"register-card\" style=\"max-width: 2000px; margin: auto; width: 100%;\">\n  <div class=\"row d-flex justify-content-center col-12 mb-5\">\n    <div class=\"col-5 border-pink rounded m-20 background-light card pb-2\">\n\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"onRegister()\">\n\n        <!-- Username -->\n        <div class=\"form-floating mb-2\">\n          <!-- existing username input and label -->\n          <div *ngIf=\"registerForm.get('username')?.touched\">\n            <small class=\"error\" *ngIf=\"registerForm.get('username')?.errors?.required\">Username is required.</small>\n            <small class=\"error\" *ngIf=\"registerForm.get('username')?.errors?.alreadyTaken\">Username is already taken.</small>\n          </div>\n        </div>\n\n        <!-- Email -->\n        <div class=\"form-floating mb-2\">\n          <!-- existing email input and label -->\n          <div *ngIf=\"registerForm.get('email')?.touched\">\n            <small class=\"error\" *ngIf=\"registerForm.get('email')?.errors?.required\">Email is required.</small>\n            <small class=\"error\" *ngIf=\"registerForm.get('email')?.errors?.email\">Invalid email format.</small>\n          </div>\n        </div>\n\n        <!-- Password -->\n        <div class=\"form-floating mb-2\">\n          <!-- existing password input and label -->\n          <div *ngIf=\"registerForm.get('password')?.touched\">\n            <small class=\"error\" *ngIf=\"registerForm.get('password')?.errors?.required\">Password is required.</small>\n            <small class=\"error\" *ngIf=\"registerForm.get('password')?.errors?.minlength\">Password must be at least 8 characters long.</small>\n          </div>\n        </div>\n\n        <!-- Confirm Password -->\n        <div class=\"form-floating mb-2\">\n          <!-- existing confirm password input and label -->\n          <div *ngIf=\"registerForm.get('confirmPassword')?.touched\">\n            <small class=\"error\" *ngIf=\"registerForm.get('confirmPassword')?.errors?.required\">Confirm password is required.</small>\n            <small class=\"error\" *ngIf=\"registerForm.errors?.notMatching\">Passwords do not match.</small>\n          </div>\n        </div>\n\n        <div class=\"d-flex\">\n          <button type=\"submit\" class=\"mb-5 login-pink-btn m-auto\" [disabled]=\"!registerForm.valid\">Register</button>\n        </div>\n\n      </form>\n      \n\n    </div>\n  </div>\n  </section>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}