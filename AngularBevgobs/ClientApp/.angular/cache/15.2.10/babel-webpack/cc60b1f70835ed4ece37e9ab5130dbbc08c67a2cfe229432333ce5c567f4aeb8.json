{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/authentication.service\";\nimport * as i2 from \"@angular/forms\";\nexport class UserSettingsComponent {\n  constructor(authService, formBuilder) {\n    this.authService = authService;\n    this.formBuilder = formBuilder;\n    this.currentUser = null;\n    this.loading = false;\n    this.errorMessage = '';\n  }\n  ngOnInit() {\n    this.initializeForm();\n    this.loadCurrentUser();\n  }\n  loadCurrentUser() {\n    const userId = localStorage.getItem('userId');\n    if (userId) {\n      this.authService.getUserDetails(+userId).subscribe({\n        next: user => {\n          this.currentUser = user;\n          this.updateFormValues();\n        },\n        error: err => {\n          console.error('Error fetching user details:', err);\n        }\n      });\n    } else {\n      console.error('User ID not found in local storage');\n    }\n  }\n  initializeForm() {\n    this.settingsForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      username: ['', Validators.required],\n      password: ['', [Validators.minLength(8)]]\n      // Add other form controls here if needed\n    });\n  }\n\n  updateFormValues() {\n    this.settingsForm.patchValue({\n      email: this.currentUser.email,\n      username: this.currentUser.userName\n      // Update other form controls here if needed\n    });\n  }\n\n  onProfilePictureChange(event) {\n    // Handle profile picture change here\n    // You can use event.target.files for the uploaded file\n  }\n  onUpdateSettings() {\n    if (this.settingsForm.valid) {\n      this.loading = true;\n      const updatedUserData = this.settingsForm.value;\n      // Call AuthService to update user data\n      // Handle the response and errors appropriately\n      this.authService.updateUserDetails(this.currentUser.id, updatedUserData).subscribe({\n        next: response => {\n          console.log('User settings updated', response);\n          this.loading = false;\n        },\n        error: err => {\n          this.errorMessage = 'Error updating user settings';\n          console.error('Error updating user settings:', err);\n          this.loading = false;\n        }\n      });\n    }\n  }\n  static #_ = this.ɵfac = function UserSettingsComponent_Factory(t) {\n    return new (t || UserSettingsComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UserSettingsComponent,\n    selectors: [[\"app-user-settings\"]],\n    decls: 21,\n    vars: 5,\n    consts: [[1, \"user-settings\", \"container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"profile-picture\"], [\"alt\", \"Profile Picture\", 1, \"img-thumbnail\", 3, \"src\"], [\"type\", \"file\", 3, \"change\"], [1, \"form-group\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", 3, \"value\"], [\"for\", \"username\"], [\"type\", \"text\", \"id\", \"username\", \"formControlName\", \"username\", 3, \"value\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"]],\n    template: function UserSettingsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function UserSettingsComponent_Template_form_ngSubmit_1_listener() {\n          return ctx.onUpdateSettings();\n        });\n        i0.ɵɵelementStart(2, \"div\", 2)(3, \"h3\");\n        i0.ɵɵtext(4, \"Profile Picture\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"img\", 3);\n        i0.ɵɵelementStart(6, \"input\", 4);\n        i0.ɵɵlistener(\"change\", function UserSettingsComponent_Template_input_change_6_listener($event) {\n          return ctx.onProfilePictureChange($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"div\", 5)(8, \"label\", 6);\n        i0.ɵɵtext(9, \"Email:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 5)(12, \"label\", 8);\n        i0.ɵɵtext(13, \"Username:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"input\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 5)(16, \"label\", 10);\n        i0.ɵɵtext(17, \"Password:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(18, \"input\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"button\", 12);\n        i0.ɵɵtext(20, \"Update Settings\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.settingsForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"src\", (ctx.currentUser == null ? null : ctx.currentUser.UserPhoto) ? \"data:image/png;base64,\" + ctx.currentUser.UserPhoto : (ctx.currentUser == null ? null : ctx.currentUser.UserPhotoUrl) ? ctx.currentUser.UserPhotoUrl : \"assets/images/defaultuser.png\", i0.ɵɵsanitizeUrl);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"value\", ctx.currentUser == null ? null : ctx.currentUser.email);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"value\", ctx.currentUser == null ? null : ctx.currentUser.userName);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"disabled\", !ctx.settingsForm.valid);\n      }\n    },\n    dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["Validators","UserSettingsComponent","constructor","authService","formBuilder","ngOnInit","initializeForm","loadCurrentUser","userId","localStorage","getItem","getUserDetails","subscribe","next","user","currentUser","updateFormValues","error","err","console","settingsForm","group","email","required","username","password","minLength","patchValue","userName","onProfilePictureChange","event","onUpdateSettings","valid","loading","updatedUserData","value","updateUserDetails","id","response","log","errorMessage","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/brageeilertsen/RiderProjects/AngularBevgobs1/AngularBevgobs/ClientApp/src/app/user-settings/user-settings.component.ts","/Users/brageeilertsen/RiderProjects/AngularBevgobs1/AngularBevgobs/ClientApp/src/app/user-settings/user-settings.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/services/authentication.service';\n\n@Component({\n  selector: 'app-user-settings',\n  templateUrl: './user-settings.component.html',\n  styleUrls: ['./user-settings.component.css']\n})\nexport class UserSettingsComponent implements OnInit {\n  currentUser: any = null;\n  settingsForm!: FormGroup;\n  loading = false;\n  errorMessage: string = '';\n\n  constructor(\n    private authService: AuthService,\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.initializeForm();\n    this.loadCurrentUser();\n  }\n\n  private loadCurrentUser() {\n    const userId = localStorage.getItem('userId');\n    if (userId) {\n      this.authService.getUserDetails(+userId).subscribe({\n        next: (user) => {\n          this.currentUser = user;\n          this.updateFormValues();\n        },\n        error: (err) => {\n          console.error('Error fetching user details:', err);\n        }\n      });\n    } else {\n      console.error('User ID not found in local storage');\n    }\n  }\n\n  private initializeForm() {\n    this.settingsForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      username: ['', Validators.required],\n      password: ['', [Validators.minLength(8)]]\n      // Add other form controls here if needed\n    });\n  }\n\n  private updateFormValues() {\n    this.settingsForm.patchValue({\n      email: this.currentUser.email,\n      username: this.currentUser.userName\n      // Update other form controls here if needed\n    });\n  }\n\n  onProfilePictureChange(event: any) {\n    // Handle profile picture change here\n    // You can use event.target.files for the uploaded file\n  }\n\n  onUpdateSettings() {\n    if (this.settingsForm.valid) {\n      this.loading = true;\n      const updatedUserData = this.settingsForm.value;\n      // Call AuthService to update user data\n      // Handle the response and errors appropriately\n      this.authService.updateUserDetails(this.currentUser.id, updatedUserData).subscribe({\n        next: (response) => {\n          console.log('User settings updated', response);\n          this.loading = false;\n        },\n        error: (err) => {\n          this.errorMessage = 'Error updating user settings';\n          console.error('Error updating user settings:', err);\n          this.loading = false;\n        }\n      });\n    }\n  }\n}\n","<div class=\"user-settings container\">\n  <form [formGroup]=\"settingsForm\" (ngSubmit)=\"onUpdateSettings()\">\n\n    <!-- Profile Picture -->\n    <div class=\"profile-picture\">\n      <h3>Profile Picture</h3>\n      <img [src]=\"currentUser?.UserPhoto ? 'data:image/png;base64,' + currentUser.UserPhoto : (currentUser?.UserPhotoUrl ? currentUser.UserPhotoUrl : 'assets/images/defaultuser.png')\" alt=\"Profile Picture\" class=\"img-thumbnail\">\n      <input type=\"file\" (change)=\"onProfilePictureChange($event)\">\n    </div>\n\n    <!-- Email Field -->\n    <div class=\"form-group\">\n      <label for=\"email\">Email:</label>\n      <input type=\"email\" id=\"email\" formControlName=\"email\" [value]=\"currentUser?.email\">\n    </div>\n\n    <!-- Username Field -->\n    <div class=\"form-group\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" formControlName=\"username\" [value]=\"currentUser?.userName\">\n    </div>\n\n    <!-- Password Field -->\n    <div class=\"form-group\">\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" formControlName=\"password\">\n    </div>\n\n    <!-- Update Button -->\n    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!settingsForm.valid\">Update Settings</button>\n  </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}