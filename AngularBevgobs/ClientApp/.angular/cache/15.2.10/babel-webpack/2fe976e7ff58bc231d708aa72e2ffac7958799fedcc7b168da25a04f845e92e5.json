{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./thread.service\";\nimport * as i3 from \"src/app/services/authentication.service\";\nexport class ThreadContainerComponent {\n  constructor(_route, _router, _threadService, _authService) {\n    this._route = _route;\n    this._router = _router;\n    this._threadService = _threadService;\n    this._authService = _authService;\n    this.thread = null;\n    this.isAuthenticated = false;\n  }\n  ngOnInit() {\n    this.isAuthenticated = this._authService.isAuthenticated();\n    this._route.paramMap.subscribe(params => {\n      const id = params.get('id');\n      if (id) {\n        this.getThreadData(+id);\n      } else {\n        console.error('Thread ID is missing');\n        this._router.navigate(['/']);\n      }\n    });\n  }\n  getThreadData(id) {\n    this._threadService.getThreadById(+id).subscribe(data => {\n      this.thread = data;\n    }, error => {\n      console.error('Error fetching thread:', error);\n      this._router.navigate(['/']);\n    });\n  }\n  editThread() {\n    if (this.thread && this.thread.ThreadId) {\n      this._router.navigate(['/edit-thread', this.thread.ThreadId]);\n    } else {\n      console.error('Thread data is missing');\n    }\n  }\n  deleteThread() {\n    if (this.thread && this.thread.ThreadId) {\n      if (confirm('Are you sure you want to delete this thread?')) {\n        this._threadService.deleteThread(this.thread.ThreadId).subscribe({\n          next: () => {\n            console.log('Thread deleted successfully');\n            this._router.navigate(['/']);\n          },\n          error: err => console.error('Error deleting thread:', err)\n        });\n      }\n    } else {\n      console.error('Thread data is missing');\n    }\n  }\n  static #_ = this.ɵfac = function ThreadContainerComponent_Factory(t) {\n    return new (t || ThreadContainerComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.ThreadService), i0.ɵɵdirectiveInject(i3.AuthService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ThreadContainerComponent,\n    selectors: [[\"app-thread-container\"]],\n    decls: 0,\n    vars: 0,\n    template: function ThreadContainerComponent_Template(rf, ctx) {},\n    styles: [\"body[_ngcontent-%COMP%] {\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdGhyZWFkL3RocmVhZC1jb250YWluZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiYm9keSB7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":";;;;AAWA,OAAM,MAAOA,wBAAwB;EAInCC,YACUC,MAAsB,EACtBC,OAAe,EACfC,cAA6B,EAC7BC,YAAyB;IAHzB,WAAM,GAANH,MAAM;IACN,YAAO,GAAPC,OAAO;IACP,mBAAc,GAAdC,cAAc;IACd,iBAAY,GAAZC,YAAY;IAPtB,WAAM,GAAmB,IAAI;IAC7B,oBAAe,GAAY,KAAK;EAO7B;EAEHC,QAAQ;IACN,IAAI,CAACC,eAAe,GAAG,IAAI,CAACF,YAAY,CAACE,eAAe,EAAE;IAE1D,IAAI,CAACL,MAAM,CAACM,QAAQ,CAACC,SAAS,CAACC,MAAM,IAAG;MACtC,MAAMC,EAAE,GAAGD,MAAM,CAACE,GAAG,CAAC,IAAI,CAAC;MAC3B,IAAID,EAAE,EAAE;QACN,IAAI,CAACE,aAAa,CAAC,CAACF,EAAE,CAAC;OACxB,MAAM;QACLG,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAC;QACrC,IAAI,CAACZ,OAAO,CAACa,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;;IAEhC,CAAC,CAAC;EACJ;EAEAH,aAAa,CAACF,EAAU;IACtB,IAAI,CAACP,cAAc,CAACa,aAAa,CAAC,CAACN,EAAE,CAAC,CAACF,SAAS,CAC9CS,IAAI,IAAG;MACL,IAAI,CAACC,MAAM,GAAGD,IAAI;IACpB,CAAC,EACDH,KAAK,IAAG;MACND,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,IAAI,CAACZ,OAAO,CAACa,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC,CACF;EACH;EAEAI,UAAU;IACR,IAAI,IAAI,CAACD,MAAM,IAAI,IAAI,CAACA,MAAM,CAACE,QAAQ,EAAE;MACvC,IAAI,CAAClB,OAAO,CAACa,QAAQ,CAAC,CAAC,cAAc,EAAE,IAAI,CAACG,MAAM,CAACE,QAAQ,CAAC,CAAC;KAC9D,MAAM;MACLP,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC;;EAE3C;EAEAO,YAAY;IACV,IAAI,IAAI,CAACH,MAAM,IAAI,IAAI,CAACA,MAAM,CAACE,QAAQ,EAAE;MACvC,IAAIE,OAAO,CAAC,8CAA8C,CAAC,EAAE;QAC3D,IAAI,CAACnB,cAAc,CAACkB,YAAY,CAAC,IAAI,CAACH,MAAM,CAACE,QAAQ,CAAC,CAACZ,SAAS,CAAC;UAC/De,IAAI,EAAE,MAAK;YACTV,OAAO,CAACW,GAAG,CAAC,6BAA6B,CAAC;YAC1C,IAAI,CAACtB,OAAO,CAACa,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;UAC9B,CAAC;UACDD,KAAK,EAAEW,GAAG,IAAIZ,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEW,GAAG;SAC1D,CAAC;;KAEL,MAAM;MACLZ,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC;;EAE3C;EAAC;qBA3DUf,wBAAwB;EAAA;EAAA;UAAxBA,wBAAwB;IAAA2B;IAAAC;IAAAC;IAAAC;IAAAC;EAAA","names":["ThreadContainerComponent","constructor","_route","_router","_threadService","_authService","ngOnInit","isAuthenticated","paramMap","subscribe","params","id","get","getThreadData","console","error","navigate","getThreadById","data","thread","editThread","ThreadId","deleteThread","confirm","next","log","err","selectors","decls","vars","template","styles"],"sourceRoot":"","sources":["/Users/brageeilertsen/RiderProjects/AngularBevgobs1/AngularBevgobs/ClientApp/src/app/thread/thread-container.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { IThread } from './thread';\nimport { ThreadService } from './thread.service';\nimport { AuthService } from 'src/app/services/authentication.service';\n\n@Component({\n  selector: 'app-thread-container',\n  templateUrl: './thread-container.component.html',\n  styleUrls: ['./thread-container.component.css']\n})\nexport class ThreadContainerComponent implements OnInit {\n  thread: IThread | null = null;\n  isAuthenticated: boolean = false;\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router,\n    private _threadService: ThreadService,\n    private _authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.isAuthenticated = this._authService.isAuthenticated();\n\n    this._route.paramMap.subscribe(params => {\n      const id = params.get('id');\n      if (id) {\n        this.getThreadData(+id);\n      } else {\n        console.error('Thread ID is missing');\n        this._router.navigate(['/']);\n      }\n    });\n  }\n\n  getThreadData(id: number): void {\n    this._threadService.getThreadById(+id).subscribe(\n      data => {\n        this.thread = data;\n      },\n      error => {\n        console.error('Error fetching thread:', error);\n        this._router.navigate(['/']);\n      }\n    );\n  }\n\n  editThread(): void {\n    if (this.thread && this.thread.ThreadId) {\n      this._router.navigate(['/edit-thread', this.thread.ThreadId]);\n    } else {\n      console.error('Thread data is missing');\n    }\n  }\n\n  deleteThread(): void {\n    if (this.thread && this.thread.ThreadId) {\n      if (confirm('Are you sure you want to delete this thread?')) {\n        this._threadService.deleteThread(this.thread.ThreadId).subscribe({\n          next: () => {\n            console.log('Thread deleted successfully');\n            this._router.navigate(['/']);\n          },\n          error: err => console.error('Error deleting thread:', err)\n        });\n      }\n    } else {\n      console.error('Thread data is missing');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}