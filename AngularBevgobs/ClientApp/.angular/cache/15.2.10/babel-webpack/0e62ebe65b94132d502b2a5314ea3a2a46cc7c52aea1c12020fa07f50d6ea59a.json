{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = 'http://localhost:5186/api/authenticate';\n    this.userBaseUrl = 'http://localhost:5186/api/user';\n  }\n  login(email, password) {\n    return this.http.post(`${this.baseUrl}/login`, {\n      email,\n      password\n    }).pipe(tap(response => {\n      if (response && response.userId) {\n        localStorage.setItem('userId', response.userId.toString());\n      } else {\n        console.error('Login response does not contain userId');\n      }\n    }));\n  }\n  register(registerData) {\n    return this.http.post(`${this.baseUrl}/register`, registerData);\n  }\n  checkUsernameAvailability(username) {\n    return this.http.get('/api/user/check-username', {\n      params: {\n        username\n      }\n    });\n  }\n  getUserDetails(userId) {\n    return this.http.get(`${this.userBaseUrl}/${userId}`);\n  }\n  // Store authentication token\n  storeAuthToken(token) {\n    localStorage.setItem('authToken', token);\n  }\n  // Check if the user is authenticated\n  isAuthenticated() {\n    const token = localStorage.getItem('authToken');\n    return !!token;\n  }\n  // Logout the user\n  logout() {\n    localStorage.removeItem('authToken');\n    this.router.navigate(['/']);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAoBA,GAAG,QAAO,MAAM;;;;AAMpC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAF5C,YAAO,GAAG,wCAAwC;IAClD,gBAAW,GAAG,gCAAgC;EACU;EAEhEC,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAM,GAAG,IAAI,CAACC,OAAO,QAAQ,EAAE;MAAEH,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAACG,IAAI,CAC3EV,GAAG,CAACW,QAAQ,IAAG;MACb,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,MAAM,EAAE;QAC/BC,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEH,QAAQ,CAACC,MAAM,CAACG,QAAQ,EAAE,CAAC;OAC3D,MAAM;QACLC,OAAO,CAACC,KAAK,CAAC,wCAAwC,CAAC;;IAE3D,CAAC,CAAC,CACH;EACH;EAGAC,QAAQ,CAACC,YAAiB;IACxB,OAAO,IAAI,CAAChB,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,WAAW,EAAEU,YAAY,CAAC;EACjE;EAEAC,yBAAyB,CAACC,QAAgB;IACxC,OAAO,IAAI,CAAClB,IAAI,CAACmB,GAAG,CAAU,0BAA0B,EAAE;MAAEC,MAAM,EAAE;QAAEF;MAAQ;IAAE,CAAE,CAAC;EACrF;EAEAG,cAAc,CAACZ,MAAc;IAC3B,OAAO,IAAI,CAACT,IAAI,CAACmB,GAAG,CAAM,GAAG,IAAI,CAACG,WAAW,IAAIb,MAAM,EAAE,CAAC;EAC5D;EAEA;EACAc,cAAc,CAACC,KAAa;IAC1Bd,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEa,KAAK,CAAC;EAC1C;EAEA;EACAC,eAAe;IACb,MAAMD,KAAK,GAAGd,YAAY,CAACgB,OAAO,CAAC,WAAW,CAAC;IAC/C,OAAO,CAAC,CAACF,KAAK;EAChB;EAEA;EACAG,MAAM;IACJjB,YAAY,CAACkB,UAAU,CAAC,WAAW,CAAC;IACpC,IAAI,CAAC3B,MAAM,CAAC4B,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7B;EAAC;qBA7CU/B,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAgC,SAAXhC,WAAW;IAAAiC,YAFV;EAAM","names":["tap","AuthService","constructor","http","router","login","email","password","post","baseUrl","pipe","response","userId","localStorage","setItem","toString","console","error","register","registerData","checkUsernameAvailability","username","get","params","getUserDetails","userBaseUrl","storeAuthToken","token","isAuthenticated","getItem","logout","removeItem","navigate","factory","providedIn"],"sourceRoot":"","sources":["/Users/brageeilertsen/RiderProjects/AngularBevgobs1/AngularBevgobs/ClientApp/src/app/services/authentication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {Observable, tap} from 'rxjs';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private baseUrl = 'http://localhost:5186/api/authenticate';\n  private userBaseUrl = 'http://localhost:5186/api/user';\n  constructor(private http: HttpClient, private router: Router) { }\n\n  login(email: string, password: string): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/login`, { email, password }).pipe(\n      tap(response => {\n        if (response && response.userId) {\n          localStorage.setItem('userId', response.userId.toString());\n        } else {\n          console.error('Login response does not contain userId');\n        }\n      })\n    );\n  }\n\n\n  register(registerData: any): Observable<any> {\n    return this.http.post(`${this.baseUrl}/register`, registerData);\n  }\n\n  checkUsernameAvailability(username: string): Observable<boolean> {\n    return this.http.get<boolean>('/api/user/check-username', { params: { username } });\n  }\n\n  getUserDetails(userId: number): Observable<any> {\n    return this.http.get<any>(`${this.userBaseUrl}/${userId}`);\n  }\n\n  // Store authentication token\n  storeAuthToken(token: string): void {\n    localStorage.setItem('authToken', token);\n  }\n\n  // Check if the user is authenticated\n  isAuthenticated(): boolean {\n    const token = localStorage.getItem('authToken');\n    return !!token;\n  }\n\n  // Logout the user\n  logout(): void {\n    localStorage.removeItem('authToken');\n    this.router.navigate(['/']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}