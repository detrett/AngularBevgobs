{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ThreadService {\n  constructor(_http) {\n    this._http = _http;\n    this.apiUrl = 'api/thread';\n  }\n  getThreads() {\n    console.log(\"Thread Service: getSubforums()\");\n    return this._http.get(this.apiUrl);\n  }\n  getThreadById(id) {\n    console.log(\"Thread Service: getThreadById(), id: \" + id);\n    return this._http.get(this.apiUrl + `/${id}`);\n  }\n  static #_ = this.ɵfac = function ThreadService_Factory(t) {\n    return new (t || ThreadService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ThreadService,\n    factory: ThreadService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,aAAa;EAExBC,YAAoBC,KAAiB;IAAjB,UAAK,GAALA,KAAK;IADjB,WAAM,GAAG,YAAY;EACY;EAEzCC,UAAU;IACRC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAC7C,OAAO,IAAI,CAACH,KAAK,CAACI,GAAG,CAAY,IAAI,CAACC,MAAM,CAAC;EAC/C;EAEAC,aAAa,CAACC,EAAU;IACtBL,OAAO,CAACC,GAAG,CAAC,uCAAuC,GAAGI,EAAE,CAAC;IACzD,OAAO,IAAI,CAACP,KAAK,CAACI,GAAG,CAAU,IAAI,CAACC,MAAM,GAAG,IAAIE,EAAE,EAAE,CAAC;EACxD;EAAC;qBAZUT,aAAa;EAAA;EAAA;WAAbA,aAAa;IAAAU,SAAbV,aAAa;IAAAW,YAHZ;EAAM","names":["ThreadService","constructor","_http","getThreads","console","log","get","apiUrl","getThreadById","id","factory","providedIn"],"sourceRoot":"","sources":["/Users/brageeilertsen/RiderProjects/AngularBevgobs1/AngularBevgobs/ClientApp/src/app/thread/thread.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { IThread } from './thread';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ThreadService {\n  private apiUrl = 'api/thread';\n  constructor(private _http: HttpClient) { }\n\n  getThreads(): Observable<IThread[]> {\n    console.log(\"Thread Service: getSubforums()\");\n    return this._http.get<IThread[]>(this.apiUrl);\n  }\n\n  getThreadById(id: number): Observable<IThread> {\n    console.log(\"Thread Service: getThreadById(), id: \" + id);\n    return this._http.get<IThread>(this.apiUrl + `/${id}`)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}