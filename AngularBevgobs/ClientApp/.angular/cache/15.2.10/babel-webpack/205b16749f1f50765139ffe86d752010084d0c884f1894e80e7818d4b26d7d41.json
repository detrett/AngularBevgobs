{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet UserSettingsComponent = class UserSettingsComponent {\n  constructor(authService, formBuilder) {\n    this.authService = authService;\n    this.formBuilder = formBuilder;\n    this.currentUser = null;\n    this.loading = false;\n    this.errorMessage = '';\n  }\n  ngOnInit() {\n    this.initializeForm();\n    this.loadCurrentUser();\n  }\n  loadCurrentUser() {\n    const userId = localStorage.getItem('userId');\n    if (userId) {\n      this.authService.getUserDetails(+userId).subscribe({\n        next: user => {\n          this.currentUser = user;\n          this.updateFormValues();\n        },\n        error: err => {\n          console.error('Error fetching user details:', err);\n        }\n      });\n    } else {\n      console.error('User ID not found in local storage');\n    }\n  }\n  initializeForm() {\n    this.settingsForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      username: ['', Validators.required],\n      password: ['', [Validators.minLength(8)]]\n    });\n  }\n  updateFormValues() {\n    this.settingsForm.patchValue({\n      email: this.currentUser.email,\n      username: this.currentUser.userName\n    });\n  }\n  onProfilePictureChange(event) {}\n  onUpdateSettings() {\n    if (this.settingsForm.valid) {\n      this.loading = true;\n      const updatedUserData = {\n        ...this.settingsForm.value,\n        id: this.currentUser.id\n      };\n      this.authService.updateUserDetails(this.currentUser.id, updatedUserData).subscribe({\n        next: response => {\n          console.log('User settings updated', response);\n          this.loading = false;\n          this.currentUser = {\n            ...this.currentUser,\n            ...updatedUserData\n          };\n        },\n        error: err => {\n          this.errorMessage = 'Error updating user settings';\n          console.error('Error updating user settings:', err);\n          this.loading = false;\n        }\n      });\n    }\n  }\n};\nUserSettingsComponent = __decorate([Component({\n  selector: 'app-user-settings',\n  templateUrl: './user-settings.component.html',\n  styleUrls: ['./user-settings.component.css']\n})], UserSettingsComponent);\nexport { UserSettingsComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","UserSettingsComponent","constructor","authService","formBuilder","ngOnInit","initializeForm","loadCurrentUser","userId","localStorage","getItem","getUserDetails","subscribe","next","user","currentUser","updateFormValues","error","err","console","settingsForm","group","email","required","username","password","minLength","patchValue","userName","onProfilePictureChange","event","onUpdateSettings","valid","loading","updatedUserData","value","id","updateUserDetails","response","log","errorMessage","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/brageeilertsen/RiderProjects/AngularBevgobs1/AngularBevgobs/ClientApp/src/app/user-settings/user-settings.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/services/authentication.service';\n\n@Component({\n  selector: 'app-user-settings',\n  templateUrl: './user-settings.component.html',\n  styleUrls: ['./user-settings.component.css']\n})\nexport class UserSettingsComponent implements OnInit {\n  currentUser: any = null;\n  settingsForm!: FormGroup;\n  loading = false;\n  errorMessage: string = '';\n\n  constructor(\n    private authService: AuthService,\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.initializeForm();\n    this.loadCurrentUser();\n  }\n\n  private loadCurrentUser() {\n    const userId = localStorage.getItem('userId');\n    if (userId) {\n      this.authService.getUserDetails(+userId).subscribe({\n        next: (user) => {\n          this.currentUser = user;\n          this.updateFormValues();\n        },\n        error: (err) => {\n          console.error('Error fetching user details:', err);\n        }\n      });\n    } else {\n      console.error('User ID not found in local storage');\n    }\n  }\n\n  private initializeForm() {\n    this.settingsForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      username: ['', Validators.required],\n      password: ['', [Validators.minLength(8)]]\n    });\n  }\n\n  private updateFormValues() {\n    this.settingsForm.patchValue({\n      email: this.currentUser.email,\n      username: this.currentUser.userName\n    });\n  }\n\n  onProfilePictureChange(event: any) {\n  }\n\n  onUpdateSettings() {\n    if (this.settingsForm.valid) {\n      this.loading = true;\n      const updatedUserData = {\n        ...this.settingsForm.value,\n        id: this.currentUser.id\n      };\n\n      this.authService.updateUserDetails(this.currentUser.id, updatedUserData).subscribe({\n        next: (response) => {\n          console.log('User settings updated', response);\n          this.loading = false;\n\n          this.currentUser = {\n            ...this.currentUser,\n            ...updatedUserData\n          };\n        },\n        error: (err) => {\n          this.errorMessage = 'Error updating user settings';\n          console.error('Error updating user settings:', err);\n          this.loading = false;\n        }\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}