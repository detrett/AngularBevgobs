{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ThreadContainerComponent = class ThreadContainerComponent {\n  constructor(_route, _router, _threadService, _userService, authService) {\n    this._route = _route;\n    this._router = _router;\n    this._threadService = _threadService;\n    this._userService = _userService;\n    this.authService = authService;\n    this.thread = null;\n    this.currentUser = null;\n  }\n  getAuthor() {\n    console.log(\"Thread Container Component: getAuthor()\");\n    if (this.thread?.UserId != null) {\n      this._userService.getUserById(this.thread?.UserId).subscribe(data => {\n        console.log('Data received: ', JSON.stringify(data));\n        this.author = data;\n      });\n    }\n  }\n  getThreadData(id) {\n    console.log(\"Thread Container Component: getThreadData()\");\n    this._threadService.getThreadById(+id).subscribe(data => {\n      this.thread = data;\n      console.log(\"Thread Name: \" + this.thread?.Name);\n      console.log(\"Total Comments: \" + this.thread?.Comments.length);\n    }, error => {\n      console.error('Error fetching subforum:', error);\n      this._router.navigate(['/']);\n    });\n  }\n  ngOnInit() {\n    console.log(\"Thread Container Component: ngOnInit()\");\n    this._route.paramMap.subscribe(params => {\n      const id = params.get('id');\n      if (id != null) {\n        this.getThreadData(+id);\n      } else {\n        console.error('Error fetching id');\n        this._router.navigate(['/']);\n      }\n    });\n    const userId = localStorage.getItem('userId');\n    if (userId) {\n      this.authService.getUserDetails(+userId).subscribe({\n        next: user => {\n          this.currentUser = user;\n          console.log('Current user:', this.currentUser);\n        },\n        error: err => {\n          console.error('Error fetching user details:', err);\n        }\n      });\n    } else {\n      console.error('User ID not found in local storage');\n    }\n    this.getAuthor();\n  }\n  get isAuthenticated() {\n    return this.authService.isAuthenticated();\n  }\n  get isAuthorOrMod() {\n    if (this.author?.Rank == \"Admin\" || this.author?.Rank == \"Mod\" || this.currentUser == this.author?.Username) {\n      return true;\n    } else return false;\n  }\n  logout() {\n    this.authService.logout();\n  }\n};\nThreadContainerComponent = __decorate([Component({\n  selector: 'app-thread-container',\n  templateUrl: './thread-container.component.html',\n  styleUrls: ['./thread-container.component.css']\n})], ThreadContainerComponent);\nexport { ThreadContainerComponent };","map":{"version":3,"mappings":"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","names":["Component","ThreadContainerComponent","constructor","_route","_router","_threadService","_userService","authService","getAuthor","console","log","thread","UserId","getUserById","subscribe","data","JSON","stringify","author","getThreadData","id","getThreadById","Name","Comments","length","error","navigate","ngOnInit","paramMap","params","get","userId","localStorage","getItem","getUserDetails","next","user","currentUser","err","isAuthenticated","isAuthorOrMod","Rank","Username","logout","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\VisualStudio\\source\\repos\\AngularBevgobs\\AngularBevgobs\\ClientApp\\src\\app\\thread\\thread-container.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { IThread } from './thread';\r\nimport { IUser } from '../user/user';\r\nimport { ThreadService } from './thread.service';\r\nimport { AuthService } from 'src/app/services/authentication.service';\r\nimport { UserService } from '../user/user.service';\r\n\r\n@Component({\r\n  selector: 'app-thread-container',\r\n  templateUrl: './thread-container.component.html',\r\n  styleUrls: ['./thread-container.component.css']\r\n})\r\n\r\nexport class ThreadContainerComponent implements OnInit {\r\n  thread: IThread | null = null;\r\n  author?: IUser;\r\n\r\n  currentUser: any = null;\r\n\r\n  constructor(\r\n    private _route: ActivatedRoute,\r\n    private _router: Router,\r\n    private _threadService: ThreadService,\r\n    private _userService: UserService,\r\n    private authService: AuthService) { }\r\n\r\n  getAuthor(): void {\r\n    console.log(\"Thread Container Component: getAuthor()\");\r\n\r\n    if (this.thread?.UserId != null) {\r\n      this._userService.getUserById(this.thread?.UserId)\r\n        .subscribe(data => {\r\n          console.log('Data received: ', JSON.stringify(data));\r\n          this.author = data;\r\n        })\r\n    }\r\n  }\r\n\r\n  getThreadData(id: number): void {\r\n    console.log(\"Thread Container Component: getThreadData()\");\r\n    this._threadService.getThreadById(+id).subscribe(\r\n      data => {\r\n        this.thread = data;\r\n        console.log(\"Thread Name: \" + this.thread?.Name);\r\n        console.log(\"Total Comments: \" + this.thread?.Comments.length);\r\n      },\r\n      error => {\r\n        console.error('Error fetching subforum:', error);\r\n        this._router.navigate(['/']);\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    console.log(\"Thread Container Component: ngOnInit()\");\r\n\r\n    this._route.paramMap.subscribe(params => {\r\n      const id = params.get('id');\r\n\r\n      if (id != null) {\r\n        this.getThreadData(+id);\r\n      } else {\r\n        console.error('Error fetching id');\r\n        this._router.navigate(['/']);\r\n      }\r\n    });\r\n\r\n    const userId = localStorage.getItem('userId');\r\n    if (userId) {\r\n      this.authService.getUserDetails(+userId).subscribe({\r\n        next: (user) => {\r\n          this.currentUser = user;\r\n          console.log('Current user:', this.currentUser);\r\n        },\r\n        error: (err) => {\r\n          console.error('Error fetching user details:', err);\r\n        }\r\n      });\r\n    } else {\r\n      console.error('User ID not found in local storage');\r\n    }\r\n\r\n    this.getAuthor();\r\n  }\r\n\r\n  get isAuthenticated(): boolean {\r\n    return this.authService.isAuthenticated();\r\n  }\r\n\r\n  get isAuthorOrMod(): boolean {\r\n    if (this.author?.Rank == \"Admin\" || this.author?.Rank == \"Mod\" || this.currentUser == this.author?.Username) {\r\n      return true;\r\n    } else return false;\r\n  }\r\n\r\n  logout() {\r\n    this.authService.logout();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}