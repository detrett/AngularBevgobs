{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { of } from 'rxjs';\nimport { map, catchError, debounceTime } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/authentication.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nfunction RegisterComponent_div_14_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 20);\n    i0.ɵɵtext(1, \"Username is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_14_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 20);\n    i0.ɵɵtext(1, \"Username is already taken.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, RegisterComponent_div_14_small_1_Template, 2, 0, \"small\", 19);\n    i0.ɵɵtemplate(2, RegisterComponent_div_14_small_2_Template, 2, 0, \"small\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r0.registerForm.get(\"username\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r0.registerForm.get(\"username\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors.alreadyTaken);\n  }\n}\nfunction RegisterComponent_div_20_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 20);\n    i0.ɵɵtext(1, \"Email is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_20_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 20);\n    i0.ɵɵtext(1, \"Invalid email format.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, RegisterComponent_div_20_small_1_Template, 2, 0, \"small\", 19);\n    i0.ɵɵtemplate(2, RegisterComponent_div_20_small_2_Template, 2, 0, \"small\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r1.registerForm.get(\"email\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r1.registerForm.get(\"email\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors.email);\n  }\n}\nfunction RegisterComponent_div_26_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 20);\n    i0.ɵɵtext(1, \"Password is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_26_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 20);\n    i0.ɵɵtext(1, \"Password must be at least 6 characters long.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, RegisterComponent_div_26_small_1_Template, 2, 0, \"small\", 19);\n    i0.ɵɵtemplate(2, RegisterComponent_div_26_small_2_Template, 2, 0, \"small\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r2.registerForm.get(\"password\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r2.registerForm.get(\"password\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors.minlength);\n  }\n}\nfunction RegisterComponent_div_32_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 20);\n    i0.ɵɵtext(1, \"Confirm password is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_32_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 20);\n    i0.ɵɵtext(1, \" Passwords do not match.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, RegisterComponent_div_32_small_1_Template, 2, 0, \"small\", 19);\n    i0.ɵɵtemplate(2, RegisterComponent_div_32_small_2_Template, 2, 0, \"small\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r3.registerForm.get(\"confirmPassword\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.registerForm.errors == null ? null : ctx_r3.registerForm.errors.notMatching);\n  }\n}\nexport class RegisterComponent {\n  constructor(authService, router, formBuilder) {\n    this.authService = authService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n  }\n  ngOnInit() {\n    this.registerForm = this.formBuilder.group({\n      username: ['', [Validators.required], [this.usernameValidator()]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      confirmPassword: ['', [Validators.required]]\n    }, {\n      validator: this.matchPassword\n    });\n  }\n  matchPassword(group) {\n    const passwordControl = group.get('password');\n    const confirmPasswordControl = group.get('confirmPassword');\n    if (!passwordControl || !confirmPasswordControl) {\n      return {\n        invalidForm: true\n      };\n    }\n    const password = passwordControl.value;\n    const confirmPassword = confirmPasswordControl.value;\n    return password === confirmPassword ? null : {\n      notMatching: true\n    };\n  }\n  usernameValidator() {\n    return control => {\n      if (!control.value) {\n        return of(null);\n      }\n      return this.authService.checkUsernameAvailability(control.value).pipe(debounceTime(500), map(isAvailable => isAvailable ? null : {\n        alreadyTaken: true\n      }), catchError(() => of(null)));\n    };\n  }\n  onRegister() {\n    if (this.registerForm.valid) {\n      const registerData = this.registerForm.value;\n      this.authService.register(registerData).subscribe({\n        next: data => {\n          this.authService.login(registerData.email, registerData.password).subscribe({\n            next: loginData => {\n              if (loginData && loginData.token) {\n                this.authService.storeAuthToken(loginData.token);\n                localStorage.setItem('userId', loginData.userId.toString());\n                this.router.navigate(['/']);\n              }\n            },\n            error: loginError => console.error('Login failed after registration', loginError)\n          });\n        },\n        error: registerError => console.error('Registration failed', registerError)\n      });\n    }\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 36,\n  vars: 6,\n  consts: [[2, \"display\", \"flex\", \"justify-content\", \"center\", \"align-items\", \"center\", \"min-height\", \"100vh\", \"padding\", \"20px\"], [1, \"register-card\", 2, \"max-width\", \"2000px\", \"margin\", \"auto\", \"width\", \"100%\"], [1, \"row\", \"d-flex\", \"justify-content-center\", \"col-12\", \"mb-5\"], [1, \"col-5\", \"border-pink\", \"rounded\", \"m-20\", \"background-light\", \"card\", \"pb-2\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"d-flex\", \"justify-content-center\"], [1, \"h3\", \"mb-3\", \"mt-4\", \"std-color\"], [1, \"form-floating\", \"mb-2\"], [\"type\", \"text\", \"formControlName\", \"username\", 1, \"form-control\", \"custom-form-control\"], [1, \"form-label\", \"custom-form-label\"], [1, \"fa-regular\", \"fa-user\"], [4, \"ngIf\"], [\"type\", \"email\", \"formControlName\", \"email\", 1, \"form-control\", \"custom-form-control\"], [1, \"fa-regular\", \"fa-envelope\"], [\"type\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", \"custom-form-control\"], [1, \"fa-solid\", \"fa-key\"], [\"type\", \"password\", \"formControlName\", \"confirmPassword\", 1, \"form-control\", \"custom-form-control\"], [1, \"d-flex\"], [\"type\", \"submit\", 1, \"mb-5\", \"login-pink-btn\", \"m-auto\", 3, \"disabled\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"text-danger\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"section\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"form\", 4);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.onRegister();\n      });\n      i0.ɵɵelementStart(5, \"div\", 5)(6, \"h1\", 6);\n      i0.ɵɵtext(7, \"Create a new account\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(8, \"hr\");\n      i0.ɵɵelementStart(9, \"div\", 7);\n      i0.ɵɵelement(10, \"input\", 8);\n      i0.ɵɵelementStart(11, \"label\", 9);\n      i0.ɵɵelement(12, \"i\", 10);\n      i0.ɵɵtext(13, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(14, RegisterComponent_div_14_Template, 3, 2, \"div\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 7);\n      i0.ɵɵelement(16, \"input\", 12);\n      i0.ɵɵelementStart(17, \"label\", 9);\n      i0.ɵɵelement(18, \"i\", 13);\n      i0.ɵɵtext(19, \"E-mail\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(20, RegisterComponent_div_20_Template, 3, 2, \"div\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"div\", 7);\n      i0.ɵɵelement(22, \"input\", 14);\n      i0.ɵɵelementStart(23, \"label\", 9);\n      i0.ɵɵelement(24, \"i\", 15);\n      i0.ɵɵtext(25, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(26, RegisterComponent_div_26_Template, 3, 2, \"div\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"div\", 7);\n      i0.ɵɵelement(28, \"input\", 16);\n      i0.ɵɵelementStart(29, \"label\", 9);\n      i0.ɵɵelement(30, \"i\", 15);\n      i0.ɵɵtext(31, \"Repeat password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(32, RegisterComponent_div_32_Template, 3, 2, \"div\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(33, \"div\", 17)(34, \"button\", 18);\n      i0.ɵɵtext(35, \"Register\");\n      i0.ɵɵelementEnd()()()()()()();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      let tmp_2_0;\n      let tmp_3_0;\n      let tmp_4_0;\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx.registerForm.get(\"username\")) == null ? null : tmp_1_0.touched);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_2_0.touched);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", (tmp_3_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_3_0.touched);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", (tmp_4_0 = ctx.registerForm.get(\"confirmPassword\")) == null ? null : tmp_4_0.touched);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", !ctx.registerForm.valid);\n    }\n  },\n  dependencies: [i4.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","of","map","catchError","debounceTime","i0","RegisterComponent","constructor","authService","router","formBuilder","ngOnInit","registerForm","group","username","required","usernameValidator","email","password","minLength","confirmPassword","validator","matchPassword","passwordControl","get","confirmPasswordControl","invalidForm","value","notMatching","control","checkUsernameAvailability","pipe","isAvailable","alreadyTaken","onRegister","valid","registerData","register","subscribe","next","data","login","loginData","token","storeAuthToken","localStorage","setItem","userId","toString","navigate","error","loginError","console","registerError","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\VisualStudio\\source\\repos\\AngularBevgobs\\AngularBevgobs\\ClientApp\\src\\app\\register\\register.component.ts","D:\\VisualStudio\\source\\repos\\AngularBevgobs\\AngularBevgobs\\ClientApp\\src\\app\\register\\register.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {FormBuilder, FormGroup, Validators, AsyncValidatorFn, AbstractControl, ValidationErrors} from '@angular/forms';\r\nimport { AuthService } from 'src/app/services/authentication.service';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, catchError, debounceTime } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent {\r\n  registerForm!: FormGroup;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private formBuilder: FormBuilder\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.formBuilder.group({\r\n      username: ['', [Validators.required], [this.usernameValidator()]],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(8)]],\r\n      confirmPassword: ['', [Validators.required]]\r\n    }, { validator: this.matchPassword });\r\n  }\r\n\r\n  matchPassword(group: FormGroup): ValidationErrors | null {\r\n    const passwordControl = group.get('password');\r\n    const confirmPasswordControl = group.get('confirmPassword');\r\n\r\n    if (!passwordControl || !confirmPasswordControl) {\r\n      return { invalidForm: true };\r\n    }\r\n\r\n    const password = passwordControl.value;\r\n    const confirmPassword = confirmPasswordControl.value;\r\n\r\n    return password === confirmPassword ? null : { notMatching: true };\r\n  }\r\n\r\n  usernameValidator(): AsyncValidatorFn {\r\n    return (control: AbstractControl): Observable<ValidationErrors | null> => {\r\n      if (!control.value) {\r\n        return of(null);\r\n      }\r\n      return this.authService.checkUsernameAvailability(control.value).pipe(\r\n        debounceTime(500),\r\n        map(isAvailable => (isAvailable ? null : { alreadyTaken: true })),\r\n        catchError(() => of(null))\r\n      );\r\n    };\r\n  }\r\n\r\n\r\n  onRegister() {\r\n    if (this.registerForm.valid) {\r\n      const registerData = this.registerForm.value;\r\n      this.authService.register(registerData).subscribe({\r\n        next: (data) => {\r\n          this.authService.login(registerData.email, registerData.password).subscribe({\r\n            next: (loginData) => {\r\n              if (loginData && loginData.token) {\r\n                this.authService.storeAuthToken(loginData.token);\r\n                localStorage.setItem('userId', loginData.userId.toString());\r\n                this.router.navigate(['/']);\r\n              }\r\n            },\r\n            error: (loginError) => console.error('Login failed after registration', loginError)\r\n          });\r\n        },\r\n        error: (registerError) => console.error('Registration failed', registerError)\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","<div style=\"display: flex; justify-content: center; align-items: center; min-height: 100vh; padding: 20px;\">\r\n  <section class=\"register-card\" style=\"max-width: 2000px; margin: auto; width: 100%;\">\r\n  <div class=\"row d-flex justify-content-center col-12 mb-5\">\r\n    <div class=\"col-5 border-pink rounded m-20 background-light card pb-2\">\r\n\r\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"onRegister()\">\r\n\r\n        <div class=\"d-flex justify-content-center\">\r\n          <h1 class=\"h3 mb-3 mt-4 std-color\">Create a new account</h1>\r\n        </div>\r\n\r\n        <hr />\r\n\r\n        <!-- Username -->\r\n        <div class=\"form-floating mb-2\">\r\n          <input type=\"text\" class=\"form-control custom-form-control\" formControlName=\"username\">\r\n          <label class=\"form-label custom-form-label\"><i class=\"fa-regular fa-user\"></i>Username</label>\r\n          <div *ngIf=\"registerForm.get('username')?.touched\">\r\n            <small class=\"text-danger\" *ngIf=\"registerForm.get('username')?.errors?.required\">Username is required.</small>\r\n            <small class=\"text-danger\" *ngIf=\"registerForm.get('username')?.errors?.alreadyTaken\">Username is already taken.</small>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Email -->\r\n        <div class=\"form-floating mb-2\">\r\n          <input type=\"email\" class=\"form-control custom-form-control\" formControlName=\"email\">\r\n          <label class=\"form-label custom-form-label\"><i class=\"fa-regular fa-envelope\"></i>E-mail</label>\r\n          <div *ngIf=\"registerForm.get('email')?.touched\">\r\n            <small class=\"text-danger\" *ngIf=\"registerForm.get('email')?.errors?.required\">Email is required.</small>\r\n            <small class=\"text-danger\" *ngIf=\"registerForm.get('email')?.errors?.email\">Invalid email format.</small>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Password -->\r\n        <div class=\"form-floating mb-2\">\r\n          <input type=\"password\" class=\"form-control custom-form-control\" formControlName=\"password\">\r\n          <label class=\"form-label custom-form-label\"><i class=\"fa-solid fa-key\"></i>Password</label>\r\n          <div *ngIf=\"registerForm.get('password')?.touched\">\r\n            <small class=\"text-danger\" *ngIf=\"registerForm.get('password')?.errors?.required\">Password is required.</small>\r\n            <small class=\"text-danger\" *ngIf=\"registerForm.get('password')?.errors?.minlength\">Password must be at least 6 characters long.</small>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Confirm Password -->\r\n        <div class=\"form-floating mb-2\">\r\n          <input type=\"password\" class=\"form-control custom-form-control\" formControlName=\"confirmPassword\">\r\n          <label class=\"form-label custom-form-label\"><i class=\"fa-solid fa-key\"></i>Repeat password</label>\r\n          <div *ngIf=\"registerForm.get('confirmPassword')?.touched\">\r\n            <small class=\"text-danger\" *ngIf=\"registerForm.get('confirmPassword')?.errors?.required\">Confirm password is required.</small>\r\n            <small class=\"text-danger\" *ngIf=\"registerForm.errors?.notMatching\"> Passwords do not match.</small>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"d-flex\">\r\n          <button type=\"submit\" class=\"mb-5 login-pink-btn m-auto\" [disabled]=\"!registerForm.valid\">Register</button>\r\n        </div>\r\n\r\n      </form>\r\n\r\n    </div>\r\n  </div>\r\n  </section>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}