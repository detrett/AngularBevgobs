{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = 'http://localhost:5186/api/authenticate';\n    this.userBaseUrl = 'http://localhost:5186/api/user';\n  }\n  login(email, password) {\n    return this.http.post(`${this.baseUrl}/login`, {\n      email,\n      password\n    }).pipe(tap(response => {\n      console.log('Login response:', response);\n      if (response && response.userId) {\n        localStorage.setItem('userId', response.userId.toString());\n        console.log('UserId stored in localStorage:', response.userId);\n      } else {\n        console.error('Login response does not contain userId');\n      }\n    }));\n  }\n  register(registerData) {\n    return this.http.post(`${this.baseUrl}/register`, registerData);\n  }\n  checkUsernameAvailability(username) {\n    return this.http.get('/api/user/check-username', {\n      params: {\n        username\n      }\n    });\n  }\n  getUserDetails(userId) {\n    return this.http.get(`${this.userBaseUrl}/${userId}`);\n  }\n  // Store authentication token\n  storeAuthToken(token) {\n    localStorage.setItem('authToken', token);\n  }\n  // Check if the user is authenticated\n  isAuthenticated() {\n    const token = localStorage.getItem('authToken');\n    return !!token;\n  }\n  // Logout the user\n  logout() {\n    localStorage.removeItem('authToken');\n    this.router.navigate(['/']);\n  }\n  updateUserDetails(userId, updateData) {\n    return this.http.put(`${this.userBaseUrl}/update/${userId}`, updateData);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAoBA,GAAG,QAAO,MAAM;;;;AAMpC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAF5C,YAAO,GAAG,wCAAwC;IAClD,gBAAW,GAAG,gCAAgC;EACU;EAEhEC,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAM,GAAG,IAAI,CAACC,OAAO,QAAQ,EAAE;MAAEH,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAACG,IAAI,CAC3EV,GAAG,CAACW,QAAQ,IAAG;MACbC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,QAAQ,CAAC;MACxC,IAAIA,QAAQ,IAAIA,QAAQ,CAACG,MAAM,EAAE;QAC/BC,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEL,QAAQ,CAACG,MAAM,CAACG,QAAQ,EAAE,CAAC;QAC1DL,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEF,QAAQ,CAACG,MAAM,CAAC;OAC/D,MAAM;QACLF,OAAO,CAACM,KAAK,CAAC,wCAAwC,CAAC;;IAE3D,CAAC,CAAC,CACH;EACH;EAGAC,QAAQ,CAACC,YAAiB;IACxB,OAAO,IAAI,CAACjB,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,WAAW,EAAEW,YAAY,CAAC;EACjE;EAEAC,yBAAyB,CAACC,QAAgB;IACxC,OAAO,IAAI,CAACnB,IAAI,CAACoB,GAAG,CAAU,0BAA0B,EAAE;MAAEC,MAAM,EAAE;QAAEF;MAAQ;IAAE,CAAE,CAAC;EACrF;EAEAG,cAAc,CAACX,MAAc;IAC3B,OAAO,IAAI,CAACX,IAAI,CAACoB,GAAG,CAAM,GAAG,IAAI,CAACG,WAAW,IAAIZ,MAAM,EAAE,CAAC;EAC5D;EAEA;EACAa,cAAc,CAACC,KAAa;IAC1Bb,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEY,KAAK,CAAC;EAC1C;EAEA;EACAC,eAAe;IACb,MAAMD,KAAK,GAAGb,YAAY,CAACe,OAAO,CAAC,WAAW,CAAC;IAC/C,OAAO,CAAC,CAACF,KAAK;EAChB;EAEA;EACAG,MAAM;IACJhB,YAAY,CAACiB,UAAU,CAAC,WAAW,CAAC;IACpC,IAAI,CAAC5B,MAAM,CAAC6B,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7B;EAEAC,iBAAiB,CAACpB,MAAc,EAAEqB,UAAe;IAC/C,OAAO,IAAI,CAAChC,IAAI,CAACiC,GAAG,CAAM,GAAG,IAAI,CAACV,WAAW,WAAWZ,MAAM,EAAE,EAAEqB,UAAU,CAAC;EAC/E;;AAnDWlC,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoC,SAAXpC,WAAW;EAAAqC,YAFV;AAAM","names":["tap","AuthService","constructor","http","router","login","email","password","post","baseUrl","pipe","response","console","log","userId","localStorage","setItem","toString","error","register","registerData","checkUsernameAvailability","username","get","params","getUserDetails","userBaseUrl","storeAuthToken","token","isAuthenticated","getItem","logout","removeItem","navigate","updateUserDetails","updateData","put","factory","providedIn"],"sourceRoot":"","sources":["D:\\VisualStudio\\source\\repos\\AngularBevgobs\\AngularBevgobs\\ClientApp\\src\\app\\services\\authentication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {Observable, tap} from 'rxjs';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private baseUrl = 'http://localhost:5186/api/authenticate';\r\n  private userBaseUrl = 'http://localhost:5186/api/user';\r\n  constructor(private http: HttpClient, private router: Router) { }\r\n\r\n  login(email: string, password: string): Observable<any> {\r\n    return this.http.post<any>(`${this.baseUrl}/login`, { email, password }).pipe(\r\n      tap(response => {\r\n        console.log('Login response:', response);\r\n        if (response && response.userId) {\r\n          localStorage.setItem('userId', response.userId.toString());\r\n          console.log('UserId stored in localStorage:', response.userId);\r\n        } else {\r\n          console.error('Login response does not contain userId');\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n  register(registerData: any): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/register`, registerData);\r\n  }\r\n\r\n  checkUsernameAvailability(username: string): Observable<boolean> {\r\n    return this.http.get<boolean>('/api/user/check-username', { params: { username } });\r\n  }\r\n\r\n  getUserDetails(userId: number): Observable<any> {\r\n    return this.http.get<any>(`${this.userBaseUrl}/${userId}`);\r\n  }\r\n\r\n  // Store authentication token\r\n  storeAuthToken(token: string): void {\r\n    localStorage.setItem('authToken', token);\r\n  }\r\n\r\n  // Check if the user is authenticated\r\n  isAuthenticated(): boolean {\r\n    const token = localStorage.getItem('authToken');\r\n    return !!token;\r\n  }\r\n\r\n  // Logout the user\r\n  logout(): void {\r\n    localStorage.removeItem('authToken');\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  updateUserDetails(userId: number, updateData: any): Observable<any> {\r\n    return this.http.put<any>(`${this.userBaseUrl}/update/${userId}`, updateData);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}