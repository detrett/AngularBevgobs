{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nlet CommentComponent = class CommentComponent {\n  constructor(_router, _commentService, _userService, _threadService, authService) {\n    this._router = _router;\n    this._commentService = _commentService;\n    this._userService = _userService;\n    this._threadService = _threadService;\n    this.authService = authService;\n    this.currentUser = null;\n  }\n  ngAfterViewInit() {\n    // Bootstrap tooltip initialization\n    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\n      return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n  }\n  getAuthor() {\n    console.log(\"Comment Component: getAuthor()\");\n    if (this.comment?.UserId != null) {\n      this._userService.getUserById(this.comment?.UserId).subscribe(data => {\n        console.log('Data received: ', JSON.stringify(data));\n        this.author = data;\n      });\n    }\n  }\n  getThread() {\n    console.log(\"Comment Component: getThread()\");\n    if (this.comment?.ThreadId != null) {\n      this._threadService.getThreadById(this.comment?.ThreadId).subscribe(data => {\n        console.log('Data received: ', JSON.stringify(data));\n        this.thread = data;\n      });\n    }\n  }\n  getFormattedDate() {\n    console.log(\"Comment Component: getFormattedDate()\");\n    console.log(\"Last comment ID: \" + this.comment?.CreatedAt);\n    if (!this.comment?.CreatedAt) {\n      return \"Undefined date\";\n    } else {\n      const createdDate = new Date(this.comment?.CreatedAt);\n      const now = new Date();\n      const ts = now.getTime() - createdDate.getTime();\n      const minutes = Math.floor(ts / 60000);\n      const hours = Math.floor(ts / 3600000);\n      const days = Math.floor(ts / (3600000 * 24));\n      if (minutes < 2) return '1 minute ago';\n      if (hours < 1) return `${minutes} minutes ago`;\n      if (days < 1) return hours >= 2 ? `${hours} hours ago` : '1 hour ago';\n      if (days < 2) return 'yesterday';\n      if (days < 5) return `on ${createdDate.getDay()}`;\n      return `on ${createdDate.toLocaleDateString('en-US', {\n        day: 'numeric',\n        month: 'long'\n      })}`;\n    }\n  }\n  get authorJoinDate() {\n    return this.author?.CreatedAt.toLocaleDateString('en-US', {\n      day: 'numeric',\n      month: 'long'\n    });\n  }\n  get commentTitle() {\n    if (this.comment?.Title != null) {\n      return this.comment?.Title;\n    } else return this.thread?.Name;\n  }\n  ngOnInit() {\n    console.log(\"Comment Component: ngOnInit()\");\n    this.getAuthor();\n    this.getThread();\n  }\n  get isAuthenticated() {\n    return this.authService.isAuthenticated();\n  }\n  get isAuthorOrMod() {\n    if (this.author?.Rank == \"Admin\" || this.author?.Rank == \"Mod\" || this.currentUser == this.author?.Username) {\n      return true;\n    } else return false;\n  }\n  logout() {\n    this.authService.logout();\n  }\n};\n__decorate([Input()], CommentComponent.prototype, \"comment\", void 0);\nCommentComponent = __decorate([Component({\n  selector: 'app-comment',\n  templateUrl: './comment.component.html',\n  styleUrls: ['./comment.component.css']\n})], CommentComponent);\nexport { CommentComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAUC,KAAK,QAAuB,eAAe;AAiBhE,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAO3BC,YACUC,OAAe,EACfC,eAA+B,EAC/BC,YAAyB,EACzBC,cAA6B,EAC7BC,WAAwB;IAJxB,YAAO,GAAPJ,OAAO;IACP,oBAAe,GAAfC,eAAe;IACf,iBAAY,GAAZC,YAAY;IACZ,mBAAc,GAAdC,cAAc;IACd,gBAAW,GAAXC,WAAW;IAPrB,gBAAW,GAAQ,IAAI;EAOe;EAEtCC,eAAe;IACb;IACA,IAAIC,kBAAkB,GAAG,EAAE,CAACC,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACC,gBAAgB,CAAC,4BAA4B,CAAC,CAAC;IAC/F,IAAIC,WAAW,GAAGL,kBAAkB,CAACM,GAAG,CAAC,UAAUC,gBAAgB;MACjE,OAAO,IAAIC,SAAS,CAACC,OAAO,CAACF,gBAAgB,CAAC;IAChD,CAAC,CAAC;EACJ;EAEAG,SAAS;IACPC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAE7C,IAAI,IAAI,CAACC,OAAO,EAAEC,MAAM,IAAI,IAAI,EAAE;MAChC,IAAI,CAAClB,YAAY,CAACmB,WAAW,CAAC,IAAI,CAACF,OAAO,EAAEC,MAAM,CAAC,CAChDE,SAAS,CAACC,IAAI,IAAG;QAChBN,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEM,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CAAC;QACpD,IAAI,CAACG,MAAM,GAAGH,IAAI;MACpB,CAAC,CAAC;;EAER;EAEAI,SAAS;IACPV,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAE7C,IAAI,IAAI,CAACC,OAAO,EAAES,QAAQ,IAAI,IAAI,EAAE;MAClC,IAAI,CAACzB,cAAc,CAAC0B,aAAa,CAAC,IAAI,CAACV,OAAO,EAAES,QAAQ,CAAC,CACtDN,SAAS,CAACC,IAAI,IAAG;QAChBN,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEM,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CAAC;QACpD,IAAI,CAACO,MAAM,GAAGP,IAAI;MACpB,CAAC,CAAC;;EAER;EAEAQ,gBAAgB;IAEdd,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;IACpDD,OAAO,CAACC,GAAG,CAAC,mBAAmB,GAAG,IAAI,CAACC,OAAO,EAAEa,SAAS,CAAC;IAE1D,IAAI,CAAC,IAAI,CAACb,OAAO,EAAEa,SAAS,EAAE;MAC5B,OAAO,gBAAgB;KACxB,MAAM;MACL,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,IAAI,CAACf,OAAO,EAAEa,SAAS,CAAC;MAErD,MAAMG,GAAG,GAAG,IAAID,IAAI,EAAE;MACtB,MAAME,EAAE,GAAGD,GAAG,CAACE,OAAO,EAAE,GAAGJ,WAAW,CAACI,OAAO,EAAE;MAChD,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACJ,EAAE,GAAG,KAAK,CAAC;MACtC,MAAMK,KAAK,GAAGF,IAAI,CAACC,KAAK,CAACJ,EAAE,GAAG,OAAO,CAAC;MACtC,MAAMM,IAAI,GAAGH,IAAI,CAACC,KAAK,CAACJ,EAAE,IAAI,OAAO,GAAG,EAAE,CAAC,CAAC;MAE5C,IAAIE,OAAO,GAAG,CAAC,EAAE,OAAO,cAAc;MACtC,IAAIG,KAAK,GAAG,CAAC,EAAE,OAAO,GAAGH,OAAO,cAAc;MAC9C,IAAII,IAAI,GAAG,CAAC,EAAE,OAAOD,KAAK,IAAI,CAAC,GAAG,GAAGA,KAAK,YAAY,GAAG,YAAY;MACrE,IAAIC,IAAI,GAAG,CAAC,EAAE,OAAO,WAAW;MAChC,IAAIA,IAAI,GAAG,CAAC,EAAE,OAAO,MAAMT,WAAW,CAACU,MAAM,EAAE,EAAE;MACjD,OAAO,MAAMV,WAAW,CAACW,kBAAkB,CAAC,OAAO,EAAE;QAAEC,GAAG,EAAE,SAAS;QAAEC,KAAK,EAAE;MAAM,CAAE,CAAC,EAAE;;EAE7F;EAEA,IAAIC,cAAc;IAChB,OAAO,IAAI,CAACrB,MAAM,EAAEM,SAAS,CAACY,kBAAkB,CAAC,OAAO,EAAE;MAAEC,GAAG,EAAE,SAAS;MAAEC,KAAK,EAAE;IAAM,CAAE,CAAC;EAC9F;EAEA,IAAIE,YAAY;IACd,IAAI,IAAI,CAAC7B,OAAO,EAAE8B,KAAK,IAAI,IAAI,EAAE;MAC/B,OAAO,IAAI,CAAC9B,OAAO,EAAE8B,KAAK;KAC3B,MAAM,OAAO,IAAI,CAACnB,MAAM,EAAEoB,IAAI;EACjC;EAEAC,QAAQ;IACNlC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAE5C,IAAI,CAACF,SAAS,EAAE;IAChB,IAAI,CAACW,SAAS,EAAE;EAClB;EAEA,IAAIyB,eAAe;IACjB,OAAO,IAAI,CAAChD,WAAW,CAACgD,eAAe,EAAE;EAC3C;EAEA,IAAIC,aAAa;IACf,IAAI,IAAI,CAAC3B,MAAM,EAAE4B,IAAI,IAAI,OAAO,IAAI,IAAI,CAAC5B,MAAM,EAAE4B,IAAI,IAAI,KAAK,IAAI,IAAI,CAACC,WAAW,IAAI,IAAI,CAAC7B,MAAM,EAAE8B,QAAQ,EAAE;MAC3G,OAAO,IAAI;KACZ,MAAM,OAAO,KAAK;EACrB;EAEAC,MAAM;IACJ,IAAI,CAACrD,WAAW,CAACqD,MAAM,EAAE;EAC3B;CACD;AApGUC,YAAR7D,KAAK,EAAE,iDAAoB;AADjBC,gBAAgB,eAN5BF,SAAS,CAAC;EACT+D,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,GAEW/D,gBAAgB,CAqG5B;SArGYA,gBAAgB","names":["Component","Input","CommentComponent","constructor","_router","_commentService","_userService","_threadService","authService","ngAfterViewInit","tooltipTriggerList","slice","call","document","querySelectorAll","tooltipList","map","tooltipTriggerEl","bootstrap","Tooltip","getAuthor","console","log","comment","UserId","getUserById","subscribe","data","JSON","stringify","author","getThread","ThreadId","getThreadById","thread","getFormattedDate","CreatedAt","createdDate","Date","now","ts","getTime","minutes","Math","floor","hours","days","getDay","toLocaleDateString","day","month","authorJoinDate","commentTitle","Title","Name","ngOnInit","isAuthenticated","isAuthorOrMod","Rank","currentUser","Username","logout","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\VisualStudio\\source\\repos\\AngularBevgobs\\AngularBevgobs\\ClientApp\\src\\app\\comment\\comment.component.ts"],"sourcesContent":["import { Component, OnInit, Input, AfterViewInit } from '@angular/core';\r\nimport { IComment } from '../comment/comment';\r\nimport { IUser } from '../user/user';\r\nimport { IThread } from '../thread/thread';\r\nimport { Router } from '@angular/router';\r\nimport { CommentService } from '../comment/comment.service';\r\nimport { UserService } from '../user/user.service';\r\nimport { ThreadService } from '../thread/thread.service';\r\nimport { AuthService } from 'src/app/services/authentication.service';\r\ndeclare var bootstrap: any;\r\n\r\n@Component({\r\n  selector: 'app-comment',\r\n  templateUrl: './comment.component.html',\r\n  styleUrls: ['./comment.component.css']\r\n})\r\n\r\nexport class CommentComponent implements OnInit, AfterViewInit {\r\n  @Input() comment?: IComment;\r\n  author?: IUser;\r\n  thread?: IThread;\r\n\r\n  currentUser: any = null;\r\n\r\n  constructor(\r\n    private _router: Router,\r\n    private _commentService: CommentService,\r\n    private _userService: UserService,\r\n    private _threadService: ThreadService,\r\n    private authService: AuthService) { }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Bootstrap tooltip initialization\r\n    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'))\r\n    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\r\n      return new bootstrap.Tooltip(tooltipTriggerEl)\r\n    })\r\n  }\r\n\r\n  getAuthor(): void {\r\n    console.log(\"Comment Component: getAuthor()\");\r\n\r\n    if (this.comment?.UserId != null) {\r\n      this._userService.getUserById(this.comment?.UserId)\r\n        .subscribe(data => {\r\n          console.log('Data received: ', JSON.stringify(data));\r\n          this.author = data;\r\n        })\r\n    }\r\n  }\r\n\r\n  getThread(): void {\r\n    console.log(\"Comment Component: getThread()\");\r\n\r\n    if (this.comment?.ThreadId != null) {\r\n      this._threadService.getThreadById(this.comment?.ThreadId)\r\n        .subscribe(data => {\r\n          console.log('Data received: ', JSON.stringify(data));\r\n          this.thread = data;\r\n        })\r\n    }\r\n  }\r\n\r\n  getFormattedDate(): string {\r\n\r\n    console.log(\"Comment Component: getFormattedDate()\");\r\n    console.log(\"Last comment ID: \" + this.comment?.CreatedAt);\r\n\r\n    if (!this.comment?.CreatedAt) {\r\n      return \"Undefined date\"\r\n    } else {\r\n      const createdDate = new Date(this.comment?.CreatedAt);\r\n\r\n      const now = new Date();\r\n      const ts = now.getTime() - createdDate.getTime();\r\n      const minutes = Math.floor(ts / 60000);\r\n      const hours = Math.floor(ts / 3600000);\r\n      const days = Math.floor(ts / (3600000 * 24));\r\n\r\n      if (minutes < 2) return '1 minute ago';\r\n      if (hours < 1) return `${minutes} minutes ago`;\r\n      if (days < 1) return hours >= 2 ? `${hours} hours ago` : '1 hour ago';\r\n      if (days < 2) return 'yesterday';\r\n      if (days < 5) return `on ${createdDate.getDay()}`;\r\n      return `on ${createdDate.toLocaleDateString('en-US', { day: 'numeric', month: 'long' })}`;\r\n    }\r\n  }\r\n\r\n  get authorJoinDate() {\r\n    return this.author?.CreatedAt.toLocaleDateString('en-US', { day: 'numeric', month: 'long' });\r\n  }\r\n\r\n  get commentTitle() {\r\n    if (this.comment?.Title != null) {\r\n      return this.comment?.Title;\r\n    } else return this.thread?.Name;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    console.log(\"Comment Component: ngOnInit()\");\r\n\r\n    this.getAuthor();\r\n    this.getThread();\r\n  }\r\n\r\n  get isAuthenticated(): boolean {\r\n    return this.authService.isAuthenticated();\r\n  }\r\n\r\n  get isAuthorOrMod(): boolean {\r\n    if (this.author?.Rank == \"Admin\" || this.author?.Rank == \"Mod\" || this.currentUser == this.author?.Username) {\r\n      return true;\r\n    } else return false;\r\n  }\r\n\r\n  logout() {\r\n    this.authService.logout();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}